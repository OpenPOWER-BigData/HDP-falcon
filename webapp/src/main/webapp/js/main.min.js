/**** Apache Falcon UI ***/
!function() {
    "use strict";
    var a = angular.module("app.controllers.cluster", [ "app.services" ]);
    a.controller("ClusterFormCtrl", [ "$scope", "$interval", "Falcon", "EntityModel", "$state", "X2jsService", "ValidationService", "SpinnersFlag", "$timeout", "$rootScope", "$cookieStore", function(a, b, c, d, e, f, g, h, i, j, k) {
        function l() {
            var b = [ "readonly", "write", "execute", "workflow", "messaging", "registry" ], c = [ "staging", "temp", "working", "" ], e = a.clusterEntity.clusterModel.cluster.interfaces.interface, f = a.clusterEntity.clusterModel.cluster.locations.location;
            a.readonlyPos = 0, a.writePos = 1, a.executePos = 2, a.workflowPos = 3, a.messagingPos = 4, 
            a.registryPos = 5, a.stagingPos = 0, a.tempPos = 1, a.workingPos = 2, a.duplicatedLocationNames = {}, 
            e.forEach(function(a) {
                b.forEach(function(c) {
                    a._type === c && b.splice(c, 1);
                });
            }), a.registry = {
                check: !1
            }, "" === a.clusterEntity.clusterModel.cluster.tags || void 0 === a.clusterEntity.clusterModel.cluster.tags ? (a.clusterEntity.clusterModel.cluster.tags = "", 
            a.tagsArray = [ {
                key: null,
                value: null
            } ]) : a.splitTags(), a.clusterEntity.clusterModel.cluster.ACL || (angular.copy(d.defaultValues.cluster.cluster.ACL, a.clusterEntity.clusterModel.cluster.ACL), 
            a.clusterEntity.clusterModel.cluster.ACL._owner = k.get("userToken").user), f.forEach(function(a) {
                c.forEach(function(b) {
                    a._name === b && c.splice(b, 1);
                });
            }), c.forEach(function(a) {
                var b = {
                    _name: a,
                    _path: ""
                };
                f.push(b);
            }), a.clusterEntity.clusterModel.cluster.properties || (a.clusterEntity.clusterModel.cluster.properties = {
                property: [ {
                    _name: "",
                    _value: ""
                } ]
            });
        }
        function m() {
            a.readonlyPos = -1, a.writePos = -1, a.executePos = -1, a.workflowPos = -1, a.messagingPos = -1, 
            a.registryPos = -1, a.clusterEntity.clusterModel.cluster.interfaces.interface.forEach(function(b, c) {
                "readonly" == b._type ? a.readonlyPos = c : "write" == b._type ? a.writePos = c : "execute" == b._type ? a.executePos = c : "workflow" == b._type ? a.workflowPos = c : "messaging" == b._type ? a.messagingPos = c : "registry" == b._type && (a.registryPos = c);
            });
        }
        function n() {
            a.stagingPos = -1, a.tempPos = -1, a.workingPos = -1, a.clusterEntity.clusterModel.cluster.locations.location.forEach(function(b, c) {
                "staging" == b._name ? a.stagingPos = c : "temp" == b._name ? a.tempPos = c : "working" == b._name && (a.workingPos = c);
            });
        }
        function o() {
            if (a.clusterEntity.clusterModel.cluster._description || (a.clusterEntity.clusterModel.cluster._description = ""), 
            a.transformRegistry(), n(), a.clusterEntity.clusterModel.cluster.properties && a.clusterEntity.clusterModel.cluster.properties.property && a.clusterEntity.clusterModel.cluster.properties.property.length > 0) {
                var b = a.clusterEntity.clusterModel.cluster.properties.property.length - 1;
                a.clusterEntity.clusterModel.cluster.properties.property[b]._name && a.clusterEntity.clusterModel.cluster.properties.property[b]._value || (a.removeProperty(b), 
                a.clusterEntity.clusterModel.cluster.properties.property.length < 1 && delete a.clusterEntity.clusterModel.cluster.properties);
            } else delete a.clusterEntity.clusterModel.cluster.properties;
            if (a.clusterEntity.clusterModel.cluster.locations && a.clusterEntity.clusterModel.cluster.locations.location && a.clusterEntity.clusterModel.cluster.locations.location.length > 0) {
                var b = a.clusterEntity.clusterModel.cluster.locations.location.length - 1;
                a.clusterEntity.clusterModel.cluster.locations.location[b]._name && a.clusterEntity.clusterModel.cluster.locations.location[b]._path || (a.removeLocation(b), 
                a.clusterEntity.clusterModel.cluster.locations.location.length < 1 && delete a.clusterEntity.clusterModel.cluster.locations);
            } else delete a.clusterEntity.clusterModel.cluster.locations;
            a.clusterEntity.clusterModel.cluster.tags || delete a.clusterEntity.clusterModel.cluster.tags, 
            a.arrangeFieldsOrder();
        }
        function p() {
            a.validateLocations(), "forms.cluster.general" !== e.current.name && "forms.cluster.summary" !== e.current.name && b.cancel(q), 
            a.xmlPreview.edit ? (a.splitTags(), a.transformBack()) : (void 0 !== a.clusterEntity.clusterModel.cluster.tags && a.convertTags(), 
            a.showInPreview());
        }
        a.clusterEntity = d, a.xmlPreview = {
            edit: !1
        }, a.secondStep = !1, a.transformRegistry = function() {
            a.registry.check ? (a.clusterEntity.clusterModel.cluster.interfaces.interface.push({
                _type: "registry",
                _endpoint: "",
                _version: ""
            }), m()) : a.clusterEntity.clusterModel.cluster.interfaces.interface.forEach(function(b, c) {
                "registry" == b._type && a.clusterEntity.clusterModel.cluster.interfaces.interface.splice(c, 1);
            });
        }, a.arrangeFieldsOrder = function(b) {
            var c, d = {};
            c = b ? b.cluster : a.clusterEntity.clusterModel.cluster, d._xmlns = "uri:falcon:cluster:0.1", 
            d._name = c._name, d._description = c._description, d._colo = c._colo, c.tags && (d.tags = c.tags), 
            c.interfaces && (d.interfaces = c.interfaces), c.locations && (d.locations = c.locations), 
            c.ACL && (d.ACL = c.ACL), c.properties && (d.properties = c.properties), delete a.clusterEntity.clusterModel.cluster, 
            a.clusterEntity.clusterModel.cluster = d;
        }, a.convertTags = function() {
            var b = [];
            a.tagsArray.forEach(function(a) {
                a.key && a.value && b.push(a.key + "=" + a.value);
            }), b = b.join(","), a.clusterEntity.clusterModel.cluster.tags = b;
        }, a.splitTags = function() {
            a.tagsArray = [], a.clusterEntity.clusterModel.cluster.tags && a.clusterEntity.clusterModel.cluster.tags.split(",").forEach(function(b) {
                var c = b.split("=");
                a.tagsArray.push({
                    key: c[0],
                    value: c[1]
                });
            });
        }, a.addTag = function() {
            a.tagsArray.push({
                key: null,
                value: null
            });
        }, a.removeTag = function(b) {
            isNaN(b) || void 0 === b || null === b || (a.tagsArray.splice(b, 1), a.convertTags());
        }, a.validateLocations = function() {
            var b, c, d = !1, e = !1, f = !1;
            a.clusterEntity.clusterModel.cluster.locations.location.forEach(function(a, g) {
                "staging" == a._name && (d = !0, b = a._path), "temp" == a._name && (e = !0), "working" == a._name && (f = !0, 
                c = a._path);
            }), d || a.clusterEntity.clusterModel.cluster.locations.location.push({
                _name: "staging",
                _path: ""
            }), e || a.clusterEntity.clusterModel.cluster.locations.location.push({
                _name: "temp",
                _path: ""
            }), f || a.clusterEntity.clusterModel.cluster.locations.location.push({
                _name: "working",
                _path: ""
            }), b && c && b == c ? a.locationsEqualError = !0 : a.locationsEqualError = !1;
            var g = {};
            a.clusterEntity.clusterModel.cluster.locations.location.forEach(function(a, b) {
                g[a._name] || (g[a._name] = 0), g[a._name]++;
            }), a.duplicatedLocation = !1;
            for (var h in g) g[h] > 1 ? (a.duplicatedLocation = !0, a.duplicatedLocationNames[h] = !0) : a.duplicatedLocationNames[h] = !1;
        }, a.addLocation = function() {
            var b = a.clusterEntity.clusterModel.cluster.locations.location.length - 1;
            a.emptyNewLocation = !1, a.validateLocations(), a.clusterEntity.clusterModel.cluster.locations.location[b]._name && a.clusterEntity.clusterModel.cluster.locations.location[b]._path ? a.duplicatedLocation || a.clusterEntity.clusterModel.cluster.locations.location.push({
                _name: "",
                _path: ""
            }) : a.emptyNewLocation = !0;
        }, a.removeLocation = function(b) {
            isNaN(b) || void 0 === b || null === b || (a.clusterEntity.clusterModel.cluster.locations.location.splice(b, 1), 
            a.validateLocations());
        }, a.addProperty = function() {
            var b = a.clusterEntity.clusterModel.cluster.properties.property.length - 1;
            a.clusterEntity.clusterModel.cluster.properties.property[b]._name && a.clusterEntity.clusterModel.cluster.properties.property[b]._value && a.clusterEntity.clusterModel.cluster.properties.property.push({
                _name: "",
                _value: ""
            });
        }, a.removeProperty = function(b) {
            null !== b && a.clusterEntity.clusterModel.cluster.properties.property[b] && a.clusterEntity.clusterModel.cluster.properties.property.splice(b, 1);
        }, a.goSummaryStep = function(b) {
            return h.show = !0, a.validateLocations(), a.locationsEqualError || a.duplicatedLocation ? void (h.show = !1) : !a.validations.nameAvailable || b ? (g.displayValidations.show = !0, 
            g.displayValidations.nameShow = !0, void (h.show = !1)) : (o(), a.secondStep = !0, 
            e.go("forms.cluster.summary"), void i(function() {
                angular.element(".nextBtn").trigger("focus");
            }, 500));
        }, a.goGeneralStep = function() {
            h.backShow = !0, a.secondStep = !1, g.displayValidations.show = !1, g.displayValidations.nameShow = !1, 
            a.validations.nameAvailable = !0, a.clusterEntity.clusterModel.cluster.tags || (a.clusterEntity.clusterModel.cluster.tags = ""), 
            a.clusterEntity.clusterModel.cluster.properties || (a.clusterEntity.clusterModel.cluster.properties = {
                property: [ {
                    _name: "",
                    _value: ""
                } ]
            });
            var b = a.clusterEntity.clusterModel.cluster.locations.location.length - 1;
            "" !== a.clusterEntity.clusterModel.cluster.locations.location[b]._name && a.addLocation();
        }, a.saveCluster = function() {
            h.show = !0, a.saveModelBuffer(), c.logRequest(), c.postSubmitEntity(a.jsonString, "cluster").success(function(b) {
                a.skipUndo = !0, c.logResponse("success", b, !1), e.go("main");
            }).error(function(a) {
                h.show = !1, c.logResponse("error", a, !1), angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            });
        }, a.xmlPreview.editXML = function() {
            a.xmlPreview.edit = !a.xmlPreview.edit;
        }, a.showInPreview = function() {
            var b = f.json2xml_str(angular.copy(a.clusterEntity.clusterModel));
            a.prettyXml = f.prettifyXml(b), a.xml = b;
        }, a.transformBack = function() {
            try {
                var b = f.xml_str2json(a.prettyXml);
                b.cluster.ACL && b.cluster.ACL._owner && b.cluster.ACL._group && b.cluster.ACL._permission || (b.cluster.ACL = angular.copy(d.defaultValues.cluster.cluster.ACL)), 
                m(), a.registryPos != -1 && a.clusterEntity.clusterModel.cluster.interfaces.interface[a.registryPos] ? a.registry.check = !0 : a.registry.check = !1, 
                n(), a.validateLocations(), a.arrangeFieldsOrder(b), a.clusterEntity.clusterModel.cluster.properties && "" === a.clusterEntity.clusterModel.cluster.properties.property[0] && (a.clusterEntity.clusterModel.cluster.properties.property = []);
            } catch (a) {
                console.log("xml malformed");
            }
        }, a.saveModelBuffer = function() {
            a.jsonString = angular.toJson(a.clusterEntity.clusterModel), a.jsonString = JSON.parse(a.jsonString), 
            a.jsonString = f.json2xml_str(a.jsonString);
        };
        var q = b(p, 1e3);
        a.skipUndo = !1, a.$on("$destroy", function() {
            var c = angular.copy(a.clusterEntity.clusterModel.cluster), e = angular.toJson(d.defaultValues.cluster.cluster);
            c = angular.toJson(c), a.skipUndo || angular.equals(c, e) || (b.cancel(q), a.$parent.cancel("cluster", j.previousState));
        }), l();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.entity", [ "app.services" ]);
    a.controller("EntityRootCtrl", [ "$scope", function(a) {
        a.baseInit = function() {
            a.editXmlDisabled = !0;
        }, a.toggleEditXml = function() {
            a.editXmlDisabled = !a.editXmlDisabled;
        }, a.capitalize = function(a) {
            return a.charAt(0).toUpperCase() + a.slice(1);
        }, a.cancel = function() {
            var b = a.entityType;
            a[b] = null;
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("app.controllers.feed", [ "app.controllers.entity", "app.services" ]);
}(), function() {
    "use strict";
    angular.module("app.controllers.process", [ "app.services", "app.controllers.entity" ]);
}(), function() {
    "use strict";
    angular.module("app.controllers", [ "app.controllers.login", "app.controllers.navHeader", "app.controllers.rootCtrl", "app.controllers.dashboardCtrl", "app.controllers.view", "app.controllers.cluster", "app.controllers.feed", "app.controllers.process", "app.controllers.entity", "app.controllers.instance", "app.controllers.dataset" ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.dashboardCtrl", [ "app.services" ]);
    a.controller("DashboardCtrl", [ "$scope", "Falcon", "EntityModel", "FileApi", "$state", "X2jsService", "$timeout", function(a, b, c, d, e, f, g) {
        a.$parent.refreshList(), g(function() {
            angular.element("#nsPopover").trigger("click");
        }, 1e3), a.focusSearch = function() {
            a.$parent.refreshList(a.tags);
        }, a.deleteEntity = function(c, d) {
            c = c.toLowerCase(), b.logRequest(), b.deleteEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(a.tags);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.cloneEntity = function(d, g) {
            d = d.toLowerCase(), b.logRequest(), b.getEntityDefinition(d, g).success(function(g) {
                b.logResponse("success", g, !1, !0);
                var h = d + "Model", i = f.xml_str2json(g);
                i.process && i.process.tags && i.process.tags.search("_falcon_mirroring_type") !== -1 ? (i.process.name = "", 
                c.datasetModel.toImportModel = i, a.$parent.cloningMode = !0, e.go("forms.dataset.general")) : (c[h] = i, 
                c[h][d]._name = "", a.models[h] = angular.copy(i), a.cloningMode = !0, a.$parent.cloningMode = !0, 
                e.go("forms." + d + ".general"));
            }).error(function(a) {
                b.logResponse("error", a, !1, !0);
            });
        }, a.editEntity = function(d, g) {
            d = d.toLowerCase(), b.logRequest(), b.getEntityDefinition(d, g).success(function(g) {
                b.logResponse("success", g, !1, !0);
                var h = f.xml_str2json(g), i = d + "Model";
                h.process && h.process.tags.search("_falcon_mirroring_type") !== -1 ? (c.datasetModel.toImportModel = h, 
                a.$parent.cloningMode = !1, e.go("forms.dataset.general")) : (c[i] = h, a.models[i] = angular.copy(h), 
                a.editingMode = !0, a.$parent.cloningMode = !1, e.go("forms." + d + ".general"));
            }).error(function(a) {
                b.logResponse("error", a, !1, !0);
            });
        }, a.entityDefinition = function(a, d) {
            d = d.toLowerCase(), b.logRequest(), b.getEntityDefinition(d, a).success(function(g) {
                b.logResponse("success", g, !1, !0);
                var h = f.xml_str2json(g);
                c.type = d, c.name = a, c.model = h, e.go("entityDefinition");
            }).error(function(a) {
                b.logResponse("error", a, !1, !0);
            });
        }, a.resumeEntity = function(c, d) {
            b.logRequest(), b.postResumeEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(a.tags);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.scheduleEntity = function(c, d) {
            b.logRequest(), b.postScheduleEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(a.tags);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.suspendEntity = function(c, d) {
            b.logRequest(), b.postSuspendEntity(c, d).success(function(d) {
                b.logResponse("success", d, c), a.$parent.refreshList(a.tags);
            }).error(function(a) {
                b.logResponse("error", a, c);
            });
        }, a.loadTags = function(b) {
            var c = new Array();
            if (a.$parent.nameFounded || c.push({
                text: "Name:" + b
            }), !a.$parent.typeFounded) {
                var d = b.toUpperCase();
                "F" !== d && "FE" !== d && "FEE" !== d && "FEED" !== d || c.push({
                    text: "Type:feed"
                }), "P" !== d && "PR" !== d && "PRO" !== d && "PROC" !== d && "PROCE" !== d && "PROCES" !== d && "PROCESS" !== d || c.push({
                    text: "Type:process"
                }), "M" !== d && "MI" !== d && "MIR" !== d && "MIRR" !== d && "MIRRO" !== d && "MIRROR" !== d || c.push({
                    text: "Type:mirror"
                });
            }
            return "*" !== b && c.push({
                text: "Tag:" + b
            }), c;
        }, a.relationsEntity = function(a, b) {
            console.log("relations " + a + " - " + b);
        }, a.displayResults = function() {
            a.$parent.refreshList(a.tags);
        }, a.entityDetails = function(a, d) {
            d = d.toLowerCase(), b.logRequest(), b.getEntityDefinition(d, a).success(function(g) {
                b.logResponse("success", g, !1, !0);
                var h = f.xml_str2json(g);
                c.type = d, c.name = a, c.model = h, e.go("entityDetails");
            }).error(function(a) {
                b.logResponse("error", a, !1, !0);
            });
        }, a.clearTags = function() {
            a.tags = [], a.$parent.refreshList(a.tags);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.dataset", [ "app.services" ]);
    a.controller("DatasetCtrl", [ "$scope", "$interval", "Falcon", "EntityModel", "$state", "X2jsService", "DateHelper", "ValidationService", "SpinnersFlag", "$timeout", "$rootScope", "clustersList", "$cookieStore", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n() {
            a.UIModel.source.cluster && "HIVE" === a.UIModel.formType && a.getSourceDefinition(), 
            a.UIModel.target.cluster && "HIVE" === a.UIModel.formType && a.getTargetDefinition();
        }
        function o(b) {
            a.UIModel.tags.tagsArray.forEach(function(a) {
                "_falcon_mirroring_type" === a.key && (a.value = b);
            });
        }
        function p(a, b) {
            var c = "";
            return a.forEach(function(a) {
                a._name === b && (c = a._path);
            }), c;
        }
        function q(a, b) {
            var c = "";
            return a.forEach(function(a) {
                a._type === b && (c = a._endpoint);
            }), c;
        }
        function r(a) {
            if (a) {
                var b = a.split(":"), c = "hive2:" + b[1] + ":10000";
                return c;
            }
        }
        function s() {
            a.model._name = a.UIModel.name, a.model.tags = a.UIModel.tags.tagsString, a.model.retry._policy = a.UIModel.retry.policy, 
            a.model.retry._delay = a.UIModel.retry.delay.unit + "(" + a.UIModel.retry.delay.number + ")", 
            a.model.retry._attempts = a.UIModel.retry.attempts, a.model.ACL._owner = a.UIModel.acl.owner, 
            a.model.ACL._group = a.UIModel.acl.group, a.model.ACL._permission = a.UIModel.acl.permissions, 
            a.model.frequency = a.UIModel.frequency.unit + "(" + a.UIModel.frequency.number + ")", 
            a.model.clusters.cluster[0].validity._start = a.UIModel.validity.startISO, a.model.clusters.cluster[0].validity._end = a.UIModel.validity.endISO, 
            a.model.timezone = a.UIModel.validity.tz, "HDFS" === a.UIModel.formType ? ("source" === a.UIModel.runOn ? a.model.clusters.cluster[0]._name = a.UIModel.source.cluster : a.model.clusters.cluster[0]._name = a.UIModel.target.cluster, 
            a.model.workflow._name = a.UIModel.name + "-WF", a.model.properties.property.forEach(function(b) {
                "distcpMaxMaps" === b._name && (b._value = a.UIModel.allocation.hdfs.maxMaps), "distcpMapBandwidth" === b._name && (b._value = a.UIModel.allocation.hdfs.maxBandwidth), 
                "drSourceDir" === b._name && (b._value = a.UIModel.source.path), "drTargetDir" === b._name && (b._value = a.UIModel.target.path), 
                "drSourceClusterFS" === b._name && ("HDFS" === a.UIModel.source.location ? b._value = q(a.sourceClusterModel.cluster.interfaces.interface, "write") : b._value = a.UIModel.source.url), 
                "drTargetClusterFS" === b._name && ("HDFS" === a.UIModel.target.location ? b._value = q(a.targetClusterModel.cluster.interfaces.interface, "write") : b._value = a.UIModel.target.url), 
                "drNotificationReceivers" === b._name && (b._value = function() {
                    return 0 === a.UIModel.alerts.alertsArray.length ? "NA" : a.UIModel.alerts.alertsArray.join();
                }()), "sourceCluster" === b._name && ("HDFS" === a.UIModel.source.location ? b._value = a.UIModel.source.cluster : b._value = ""), 
                "targetCluster" === b._name && ("HDFS" === a.UIModel.target.location ? b._value = a.UIModel.target.cluster : b._value = "");
            })) : "HIVE" === a.UIModel.formType ? (a.model.clusters.cluster[0]._name = a.UIModel.source.cluster, 
            a.model.properties.property.forEach(function(b) {
                "distcpMaxMaps" === b._name && (b._value = a.UIModel.allocation.hive.maxMapsDistcp), 
                "distcpMapBandwidth" === b._name && (b._value = a.UIModel.allocation.hive.maxBandwidth), 
                "sourceCluster" === b._name && (b._value = a.UIModel.source.cluster), "targetCluster" === b._name && (b._value = a.UIModel.target.cluster), 
                "sourceHiveServer2Uri" === b._name && (b._value = a.UIModel.hiveOptions.source.hiveServerToEndpoint), 
                "targetHiveServer2Uri" === b._name && (b._value = a.UIModel.hiveOptions.target.hiveServerToEndpoint), 
                "sourceStagingPath" === b._name && (b._value = a.UIModel.hiveOptions.source.stagingPath), 
                "targetStagingPath" === b._name && (b._value = a.UIModel.hiveOptions.target.stagingPath), 
                "sourceNN" === b._name && (b._value = q(a.sourceClusterModel.cluster.interfaces.interface, "write")), 
                "targetNN" === b._name && (b._value = q(a.targetClusterModel.cluster.interfaces.interface, "write")), 
                "sourceMetastoreUri" === b._name && (b._value = q(a.sourceClusterModel.cluster.interfaces.interface, "registry")), 
                "targetMetastoreUri" === b._name && (b._value = q(a.targetClusterModel.cluster.interfaces.interface, "registry")), 
                "sourceTable" === b._name && ("databases" === a.UIModel.source.hiveDatabaseType ? b._value = "*" : b._value = a.UIModel.source.hiveTables), 
                "sourceDatabase" === b._name && ("databases" === a.UIModel.source.hiveDatabaseType ? b._value = a.UIModel.source.hiveDatabases : b._value = a.UIModel.source.hiveDatabase), 
                "maxEvents" === b._name && (b._value = a.UIModel.allocation.hive.maxMapsEvents), 
                "replicationMaxMaps" === b._name && (b._value = a.UIModel.allocation.hive.maxMapsMirror), 
                "clusterForJobRun" === b._name && ("source" === a.UIModel.runOn ? b._value = a.UIModel.source.cluster : b._value = a.UIModel.target.cluster), 
                "clusterForJobRunWriteEP" === b._name && ("source" === a.UIModel.runOn ? b._value = q(a.sourceClusterModel.cluster.interfaces.interface, "write") : b._value = q(a.targetClusterModel.cluster.interfaces.interface, "write")), 
                "drJobName" === b._name && (b._value = a.UIModel.name), "drNotificationReceivers" === b._name && (b._value = function() {
                    return 0 === a.UIModel.alerts.alertsArray.length ? "NA" : a.UIModel.alerts.alertsArray.join();
                }());
            })) : console.log("error in form type"), a.xmlString = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + f.json2xml_str(a.completeModel);
        }
        function t(a) {
            return h.patterns.s3.test(a) ? "s3" : h.patterns.azure.test(a) ? "azure" : "HDFS";
        }
        function u(b) {
            var c;
            c = b.process.tags.search("_falcon_mirroring_type=HDFS") !== -1 ? "HDFS" : "HIVE", 
            a.switchModel(c), d.datasetModel.UIModel.formType = c, d.datasetModel.UIModel.name = function() {
                return a.clone ? "" : b.process._name;
            }(), d.datasetModel.UIModel.retry.policy = b.process.retry._policy, d.datasetModel.UIModel.retry.attempts = b.process.retry._attempts, 
            d.datasetModel.UIModel.retry.delay.number = function() {
                return parseInt(b.process.retry._delay.split("(")[1]);
            }(), d.datasetModel.UIModel.retry.delay.unit = function() {
                return b.process.retry._delay.split("(")[0];
            }(), d.datasetModel.UIModel.frequency.number = function() {
                return parseInt(b.process.frequency.split("(")[1]);
            }(), d.datasetModel.UIModel.frequency.unit = function() {
                return b.process.frequency.split("(")[0];
            }(), d.datasetModel.UIModel.acl.owner = b.process.ACL._owner, d.datasetModel.UIModel.acl.group = b.process.ACL._group, 
            d.datasetModel.UIModel.acl.permissions = b.process.ACL._permission, d.datasetModel.UIModel.validity.startISO = b.process.clusters.cluster[0].validity._start, 
            d.datasetModel.UIModel.validity.endISO = b.process.clusters.cluster[0].validity._end, 
            d.datasetModel.UIModel.validity.tz = b.process.timezone, d.datasetModel.UIModel.validity.start = g.importDate(b.process.clusters.cluster[0].validity._start, b.process.timezone), 
            d.datasetModel.UIModel.validity.startTime = g.importDate(b.process.clusters.cluster[0].validity._start, b.process.timezone), 
            d.datasetModel.UIModel.validity.end = g.importDate(b.process.clusters.cluster[0].validity._end, b.process.timezone), 
            d.datasetModel.UIModel.validity.endTime = g.importDate(b.process.clusters.cluster[0].validity._end, b.process.timezone), 
            d.datasetModel.UIModel.tags.tagsString = b.process.tags, d.datasetModel.UIModel.tags.tagsArray = function() {
                var a = [];
                return b.process.tags.split(",").forEach(function(b) {
                    var c = b.split("=");
                    a.push({
                        key: c[0],
                        value: c[1]
                    });
                }), a;
            }(), "HDFS" === c ? (b.process.properties.property.forEach(function(a) {
                "distcpMaxMaps" === a._name && (d.datasetModel.UIModel.allocation.hdfs.maxMaps = a._value), 
                "distcpMapBandwidth" === a._name && (d.datasetModel.UIModel.allocation.hdfs.maxBandwidth = a._value), 
                "drSourceDir" === a._name && (d.datasetModel.UIModel.source.path = a._value), "drTargetDir" === a._name && (d.datasetModel.UIModel.target.path = a._value), 
                "drNotificationReceivers" === a._name && (d.datasetModel.UIModel.alerts.alertsArray = function() {
                    return "NA" !== a._value ? a._value.split(",") : [];
                }()), "targetCluster" === a._name && (d.datasetModel.UIModel.target.cluster = a._value), 
                "sourceCluster" === a._name && (d.datasetModel.UIModel.source.cluster = a._value), 
                "drSourceClusterFS" === a._name && (d.datasetModel.UIModel.source.url = a._value), 
                "drTargetClusterFS" === a._name && (d.datasetModel.UIModel.target.url = a._value);
            }), d.datasetModel.UIModel.source.cluster === b.process.clusters.cluster[0]._name && (d.datasetModel.UIModel.runOn = "source"), 
            d.datasetModel.UIModel.target.cluster === b.process.clusters.cluster[0]._name && (d.datasetModel.UIModel.runOn = "target"), 
            d.datasetModel.UIModel.source.location = t(d.datasetModel.UIModel.source.url), d.datasetModel.UIModel.target.location = t(d.datasetModel.UIModel.target.url)) : "HIVE" === c && b.process.properties.property.forEach(function(a) {
                "distcpMaxMaps" === a._name && (d.datasetModel.UIModel.allocation.hive.maxMapsDistcp = a._value), 
                "distcpMapBandwidth" === a._name && (d.datasetModel.UIModel.allocation.hive.maxBandwidth = a._value), 
                "sourceCluster" === a._name && (d.datasetModel.UIModel.source.cluster = a._value), 
                "targetCluster" === a._name && (d.datasetModel.UIModel.target.cluster = a._value), 
                "sourceStagingPath" === a._name && (d.datasetModel.UIModel.hiveOptions.source.stagingPath = a._value), 
                "targetStagingPath" === a._name && (d.datasetModel.UIModel.hiveOptions.target.stagingPath = a._value, 
                "*" === a._value ? d.datasetModel.UIModel.source.hiveDatabaseType = "databases" : d.datasetModel.UIModel.source.hiveDatabaseType = "tables"), 
                "sourceHiveServer2Uri" === a._name && (d.datasetModel.UIModel.hiveOptions.source.hiveServerToEndpoint = a._value), 
                "targetHiveServer2Uri" === a._name && (d.datasetModel.UIModel.hiveOptions.target.hiveServerToEndpoint = a._value), 
                "sourceTable" === a._name && (d.datasetModel.UIModel.source.hiveTables = a._value, 
                "databases" === d.datasetModel.UIModel.source.hiveDatabaseType ? d.datasetModel.UIModel.source.hiveTables = "*" : d.datasetModel.UIModel.source.hiveTables = a._value), 
                "sourceDatabase" === a._name && ("databases" === d.datasetModel.UIModel.source.hiveDatabaseType ? d.datasetModel.UIModel.source.hiveDatabases = a._value : d.datasetModel.UIModel.source.hiveDatabase = a._value), 
                "maxEvents" === a._name && (d.datasetModel.UIModel.allocation.hive.maxMapsEvents = a._value), 
                "replicationMaxMaps" === a._name && (d.datasetModel.UIModel.allocation.hive.maxMapsMirror = a._value), 
                "clusterForJobRun" === a._name && (d.datasetModel.UIModel.source.cluster === a._value ? d.datasetModel.UIModel.runOn = "source" : d.datasetModel.UIModel.runOn = "target"), 
                "drNotificationReceivers" === a._name && (d.datasetModel.UIModel.alerts.alertsArray = function() {
                    return "NA" !== a._value ? a._value.split(",") : [];
                }());
            }), d.datasetModel.UIModel.source.cluster && a.getSourceDefinition(), d.datasetModel.UIModel.target.cluster && a.getTargetDefinition();
        }
        a.skipUndo = !1, a.$on("$destroy", function() {
            a.skipUndo || angular.equals(a.UIModel, d.defaultValues.MirrorUIModel) || a.$parent.cancel("dataset", k.previousState);
        }), a.isActive = function(a) {
            return a === e.current.name;
        }, a.isCompleted = function(a) {
            return e.get(a).data && e.get(a).data.completed;
        }, a.clone = a.$parent.cloningMode, l ? l.type ? a.clustersList = [ l ] : a.clustersList = l : a.clustersList = [], 
        a.switchModel = function(b) {
            a.model = d.datasetModel[b].process, a.UIModel.formType = b, a.completeModel = d.datasetModel[b], 
            o(b), n();
        }, a.model = d.datasetModel.HDFS.process, a.UIModel = d.datasetModel.UIModel, a.completeModel = d.datasetModel.HDFS, 
        a.UIModel.acl.owner = m.get("userToken").user, a.checkFromSource = function() {
            "HDFS" !== a.UIModel.source.location && (a.UIModel.target.location = "HDFS", a.UIModel.runOn = "target");
        }, a.checkFromTarget = function() {
            "HDFS" !== a.UIModel.target.location && (a.UIModel.source.location = "HDFS", a.UIModel.runOn = "source");
        }, a.addTag = function() {
            "_falcon_mirroring_type" !== a.UIModel.tags.newTag.value && (a.UIModel.tags.tagsArray.push(a.UIModel.tags.newTag), 
            a.UIModel.tags.newTag = {
                value: "",
                key: ""
            }, a.convertTags());
        }, a.removeTag = function(b) {
            a.UIModel.tags.tagsArray.splice(b, 1), a.convertTags();
        }, a.convertTags = function() {
            var b = [];
            a.UIModel.tags.tagsArray.forEach(function(a) {
                a.key && a.value && b.push(a.key + "=" + a.value);
            }), b = b.join(","), a.UIModel.tags.tagsString = b;
        }, a.splitTags = function() {
            a.UIModel.tags.tagsArray = [], a.UIModel.tags.tagsString.split(",").forEach(function(b) {
                var c = b.split("=");
                a.UIModel.tags.tagsArray.push({
                    key: c[0],
                    value: c[1]
                });
            });
        }, a.addAlert = function() {
            a.UIModel.alerts.alertsArray.push(a.UIModel.alerts.alert.email), a.UIModel.alerts.alert = {
                email: ""
            };
        }, a.removeAlert = function(b) {
            a.UIModel.alerts.alertsArray.splice(b, 1);
        }, a.dateFormat = "MM/dd/yyyy", a.openStartDatePicker = function(b) {
            b.preventDefault(), b.stopPropagation(), a.startOpened = !0;
        }, a.openEndDatePicker = function(b) {
            b.preventDefault(), b.stopPropagation(), a.endOpened = !0;
        }, a.constructDate = function() {
            a.UIModel.validity.start && a.UIModel.validity.end && a.UIModel.validity.startTime && a.UIModel.validity.endTime && (a.UIModel.validity.startISO = g.createISO(a.UIModel.validity.start, a.UIModel.validity.startTime, a.UIModel.validity.tz), 
            a.UIModel.validity.endISO = g.createISO(a.UIModel.validity.end, a.UIModel.validity.endTime, a.UIModel.validity.tz));
        }, a.$watch(function() {
            return a.UIModel.validity.tz;
        }, function() {
            return a.constructDate();
        }), a.goNext = function(b, c) {
            return e.current.data = e.current.data || {}, e.current.data.completed = !b, i.show = !0, 
            !h.nameAvailable || b ? (h.displayValidations.show = !0, h.displayValidations.nameShow = !0, 
            i.show = !1, void angular.element("body, html").animate({
                scrollTop: 0
            }, 500)) : (h.displayValidations.show = !1, h.displayValidations.nameShow = !1, 
            a.convertTags(), s(), e.go(c), void angular.element("body, html").animate({
                scrollTop: 0
            }, 500));
        }, a.goBack = function(a) {
            i.backShow = !0, h.displayValidations.show = !1, h.displayValidations.nameShow = !1, 
            e.go(a), angular.element("body, html").animate({
                scrollTop: 0
            }, 500);
        }, a.sourceClusterModel = {}, a.targetClusterModel = {}, a.getSourceDefinition = function() {
            c.getEntityDefinition("cluster", a.UIModel.source.cluster).success(function(b) {
                a.sourceClusterModel = f.xml_str2json(b), d.datasetModel.UIModel.hiveOptions.source.stagingPath || "HIVE" !== d.datasetModel.UIModel.formType || (d.datasetModel.UIModel.hiveOptions.source.stagingPath = p(a.sourceClusterModel.cluster.locations.location, "staging")), 
                d.datasetModel.UIModel.hiveOptions.source.hiveServerToEndpoint || "HIVE" !== d.datasetModel.UIModel.formType || (d.datasetModel.UIModel.hiveOptions.source.hiveServerToEndpoint = r(q(a.sourceClusterModel.cluster.interfaces.interface, "registry")));
            }).error(function(b) {
                a.UIModel.source.cluster = "", c.logResponse("error", b, !1, !0);
            });
        }, a.getTargetDefinition = function() {
            c.getEntityDefinition("cluster", a.UIModel.target.cluster).success(function(b) {
                a.targetClusterModel = f.xml_str2json(b), d.datasetModel.UIModel.hiveOptions.target.stagingPath || "HIVE" !== d.datasetModel.UIModel.formType || (d.datasetModel.UIModel.hiveOptions.target.stagingPath = p(a.targetClusterModel.cluster.locations.location, "staging")), 
                d.datasetModel.UIModel.hiveOptions.target.hiveServerToEndpoint || "HIVE" !== d.datasetModel.UIModel.formType || (d.datasetModel.UIModel.hiveOptions.target.hiveServerToEndpoint = r(q(a.targetClusterModel.cluster.interfaces.interface, "registry")));
            }).error(function(b) {
                a.UIModel.target.cluster = "", c.logResponse("error", b, !1, !0);
            });
        }, a.save = function() {
            i.show = !0, a.$parent.cloningMode ? c.postSubmitEntity(a.xmlString, "process").success(function(b) {
                a.skipUndo = !0, c.logResponse("success", b, !1), e.go("main");
            }).error(function(a) {
                c.logResponse("error", a, !1), i.show = !1, angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            }) : c.postUpdateEntity(a.xmlString, "process", a.model._name).success(function(b) {
                a.skipUndo = !0, c.logResponse("success", b, !1), e.go("main");
            }).error(function(a) {
                i.show = !1, c.logResponse("error", a, !1), angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            });
        }, d.datasetModel.toImportModel && u(d.datasetModel.toImportModel);
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.view", [ "app.services" ]);
    a.controller("EntityDefinitionCtrl", [ "$scope", "$interval", "Falcon", "EntityModel", "$state", "X2jsService", function(a, b, c, d, e, f) {
        a.entity = d, a.xmlPreview = {
            edit: !1
        };
        var g = f.json2xml_str(angular.copy(a.entity.model));
        a.prettyXml = f.prettifyXml(g), a.xml = g;
    } ]), a.filter("titleCase", function() {
        return function(a) {
            return a = a || "", a.replace(/\w\S*/g, function(a) {
                return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
            });
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.view", [ "app.services" ]);
    a.controller("EntityDetailsCtrl", [ "$scope", "$timeout", "$interval", "Falcon", "EntityModel", "$state", "X2jsService", "EntitySerializer", "InstanceFalcon", function(a, b, c, d, e, f, g, h, i) {
        a.entity = e;
        var j = 10, k = 3;
        if (a.entityName = a.entity.name, a.entityType = a.entity.type, a.pages = [], a.nextPages = !1, 
        a.mirrorTag = "_falcon_mirroring_type", a.isMirror = function(b) {
            var c = !1;
            return void 0 !== b && b.indexOf(a.mirrorTag) !== -1 && (c = !0), c;
        }, "feed" === a.entity.type) a.feed = h.preDeserialize(a.entity.model, "feed"), 
        a.feed.name = a.entity.name, a.feed.type = a.entity.type, a.entity.start = a.entity.model.feed.clusters.cluster[0].validity._start, 
        a.entity.end = a.entity.model.feed.clusters.cluster[0].validity._end; else {
            var l = a.entity.model.process.tags;
            a.isMirror(l) && (a.entityTypeLabel = "Mirror"), a.process = h.preDeserialize(a.entity.model, "process"), 
            a.process.name = a.entity.name, a.process.type = a.entity.type, a.entity.start = a.entity.model.process.clusters.cluster[0].validity._start, 
            a.entity.end = a.entity.model.process.clusters.cluster[0].validity._end;
        }
        a.capitalize = function(a) {
            return a.charAt(0).toUpperCase() + a.slice(1);
        }, a.dateFormatter = function(a) {
            var b = a.split("T")[0], c = a.split("T")[1].split("Z")[0].split(".")[0];
            return b + " " + c;
        }, a.refreshInstanceList = function(b, c, d, e, f, g, h) {
            a.instancesList = [], n(0, 0, 0, d, e, f, g, h);
        };
        var m = function(b, c, e, f, g, h, l, n) {
            d.responses.listLoaded = !1, i.searchInstances(a.entityType, a.entityName, b, f, g, h, l, n).then(function() {
                i.data && (a.pages[c] = {}, a.pages[c].index = c, a.pages[c].data = i.data.instances, 
                a.pages[c].show = !0, a.pages[c].enabled = !0, a.pages[c].label = "" + (b / j + 1), 
                a.pages[c].data.length > j ? (b += j, a.nextPages = !0, c < k - 1 ? m(b, c + 1, e, f, g, h, l, n) : a.goPage(e)) : (a.nextPages = !1, 
                a.goPage(e)));
            });
        }, n = function(b, c, d, e, f, g, h, i) {
            a.pages = [], m(b, c, d, e, f, g, h, i);
        };
        a.goPage = function(b) {
            a.pages.forEach(function(a) {
                a.enabled = !0;
            }), a.pages[b].enabled = !1, a.instancesList = a.pages[b].data, a.instancesList.length > j && a.instancesList.pop(), 
            a.prevPages = parseInt(a.pages[b].label) > k, d.responses.listLoaded = !0;
        }, a.changePagesSet = function(a, b, c, d, e, f, g, h) {
            n(a, b, c, d, e, f, g, h);
        }, a.instanceDetails = function(b) {
            e.model = b, e.type = a.entity.type, e.name = a.entity.name, f.go("instanceDetails");
        }, a.displayIcon = function(b, c) {
            if ("FEED" === b) return a.entityTypeLabel = "Feed", "entypo download";
            if ("PROCESS" === b) {
                var d = c.process.tags;
                return a.isMirror(d) ? (a.entityTypeLabel = "Mirror", "glyphicon glyphicon-duplicate") : (a.entityTypeLabel = "Process", 
                "entypo cycle");
            }
            return a.entityTypeLabel = "Process", "entypo cycle";
        };
    } ]), a.filter("titleCase", function() {
        return function(a) {
            return a = a || "", a.replace(/\w\S*/g, function(a) {
                return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase();
            });
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.instance", [ "app.services" ]);
    a.controller("InstanceDetailsCtrl", [ "$scope", "$interval", "Falcon", "EntityModel", "$state", "X2jsService", "EntitySerializer", function(a, b, c, d, e, f) {
        a.instance = d.model, a.instance.type = d.type, a.instance.name = d.name, a.backToEntity = function() {
            var b = a.instance.type.toLowerCase(), g = a.instance.name;
            c.logRequest(), c.getEntityDefinition(b, g).success(function(a) {
                c.logResponse("success", a, !1, !0);
                var h = f.xml_str2json(a);
                d.type = b, d.name = g, d.model = h, e.go("entityDetails");
            }).error(function(a) {
                c.logResponse("error", a, !1, !0);
            });
        }, a.resumeInstance = function() {
            c.logRequest();
            var b = a.instance.instance, d = g(b);
            c.postResumeInstance(a.instance.type, a.instance.name, b, d).success(function(b) {
                c.logResponse("success", b, a.instance.type), a.instance.status = "RUNNING";
            }).error(function(b) {
                c.logResponse("error", b, a.instance.type);
            });
        }, a.reRunInstance = function() {
            c.logRequest();
            var b = a.instance.instance, d = g(b);
            c.postReRunInstance(a.instance.type, a.instance.name, b, d).success(function(b) {
                c.logResponse("success", b, a.instance.type), a.instance.status = "RUNNING";
            }).error(function(b) {
                c.logResponse("error", b, a.instance.type);
            });
        }, a.suspendInstance = function() {
            c.logRequest();
            var b = a.instance.instance, d = g(b);
            c.postSuspendInstance(a.instance.type, a.instance.name, b, d).success(function(b) {
                c.logResponse("success", b, a.instance.type), a.instance.status = "SUSPENDED";
            }).error(function(b) {
                c.logResponse("error", b, a.instance.type);
            });
        }, a.killInstance = function() {
            c.logRequest();
            var b = a.instance.instance, d = g(b);
            c.postKillInstance(a.instance.type, a.instance.name, b, d).success(function(b) {
                c.logResponse("success", b, a.instance.type), a.instance.status = "KILLED";
            }).error(function(b) {
                c.logResponse("error", b, a.instance.type);
            });
        };
        var g = function(a) {
            var b = parseInt(a.substring(a.length - 3, a.length - 1));
            return 59 === b ? b = 0 : b++, b < 10 && (b = "0" + b), a.substring(0, a.length - 3) + b + "Z";
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedClustersController", [ "$scope", "clustersList", "EntityFactory", "$timeout", function(a, b, c, d) {
        function e() {
            d(function() {
                angular.element("#clusterNameSelect").trigger("focus");
            }, 500);
        }
        function f(b) {
            if (void 0 !== b && null !== b && "null" !== b) {
                a.clusterList = [];
                var c = Object.prototype.toString.call(b.entity);
                "[object Array]" === c ? a.clusterList = b.entity : "[object Object]" === c && (a.clusterList = [ b.entity ]);
            }
        }
        e(), f(b), a.updateRetention = function() {
            "archive" === a.selectedCluster.retention.action && "source" === a.selectedCluster.type && (a.allClusters.length = 0, 
            a.allClusters.concat(a.feed.clusters), a.feed.clusters.length = 0, a.feed.clusters.push(a.sourceCluster), 
            a.feed.clusters.push(a.archiveCluster), a.sourceCluster.selected = !1, a.archiveCluster.selected = !0, 
            a.archiveCluster.active = !0, a.selectedCluster = a.archiveCluster), "archive" !== a.selectedCluster.retention.action && "source" === a.selectedCluster.type && a.archiveCluster.active && (a.archiveCluster.selected = !1, 
            a.feed.clusters.length = 0, a.allClusters.length = 0, a.feed.clusters.push(a.sourceCluster), 
            a.sourceCluster.selected = !0, a.archiveCluster.active = !1);
        }, a.addCluster = function() {
            a.selectedCluster.selected = !1;
            var b = a.newCluster(!0);
            a.feed.clusters.push(b), a.selectedCluster = b;
        }, a.newCluster = function(a) {
            return c.newCluster("target", a);
        }, a.handleCluster = function(b, c) {
            b.selected ? a.removeCluster(c) : a.selectCluster(b);
        }, a.selectCluster = function(b) {
            a.selectedCluster.selected = !1, b.selected = !0, a.selectedCluster = b;
        }, a.removeCluster = function(b) {
            b >= 0 && a.feed.clusters.length > 1 && "source" !== a.feed.clusters[b].type && !a.archiveCluster.active && (a.feed.clusters.splice(b, 1), 
            a.selectCluster(a.sourceCluster));
        }, a.clusterLocationsPlaceHolders = function() {
            var b = {};
            return a.feed.storage.fileSystem.locations.forEach(function(a) {
                b[a.type] = a.path;
            }), b;
        }(), a.selectedCluster = a.selectedCluster || a.feed.clusters[0], a.sourceCluster = a.sourceCluster || a.feed.clusters[0], 
        a.archiveCluster = a.newCluster(!1), a.archiveCluster.active = !1, a.allClusters = [];
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedGeneralInformationController", [ "$scope", function(a) {
        a.nameValid = !1, a.addTag = function() {
            a.feed.tags.push({
                key: null,
                value: null
            });
        }, a.removeTag = function(b) {
            b >= 0 && a.feed.tags.length > 1 && a.feed.tags.splice(b, 1);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedLocationController", [ "$scope", "$timeout", function(a, b) {
        function c() {
            b(function() {
                a.feed.storage.catalog.active ? angular.element(".catalogStorageInput").trigger("focus") : angular.element(".firstInput").trigger("focus");
            }, 500);
        }
        function d(a) {
            a.active = !a.active;
        }
        c(), a.toggleStorage = function() {
            d(a.feed.storage.fileSystem), d(a.feed.storage.catalog), c();
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedPropertiesController", [ "$scope", function(a) {
        a.addCustomProperty = function() {
            a.feed.customProperties.push({
                key: null,
                value: null
            });
        }, a.removeCustomProperty = function(b) {
            b >= 0 && a.feed.customProperties.length > 1 && a.feed.customProperties.splice(b, 1);
        }, a.propPlaceholders = {
            queueName: "default",
            jobPriority: "",
            parallel: 3,
            maxMaps: 8,
            mapBandwidthKB: 1024
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedController", [ "$scope", "$state", "$timeout", "Falcon", "X2jsService", "JsonTransformerFactory", "EntityFactory", "EntitySerializer", "$interval", "$controller", "ValidationService", "SpinnersFlag", "$rootScope", function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
        function n(a) {
            var b = e.xml_str2json(a), c = [], d = [];
            return b.feed.clusters.cluster[0].locations && b.feed.clusters.cluster[0].locations.location.forEach(function(a) {
                a._path && c.push(a);
            }), 0 === c.length ? delete b.feed.clusters.cluster[0].locations : b.feed.clusters.cluster[0].locations.location = c, 
            b.feed.locations && b.feed.locations.location.forEach(function(a) {
                a._path && d.push(a);
            }), 0 === d.length ? delete b.feed.locations : b.feed.locations.location = d, 1 === b.feed.properties.property.length && "" === b.feed.properties.property[0] && delete b.feed.properties, 
            e.json2xml_str(b);
        }
        a.entityType = "feed", j("EntityRootCtrl", {
            $scope: a
        }), a.loadOrCreateEntity = function() {
            var b = a.entityType, c = a.models[b + "Model"];
            return a.models[b + "Model"] = null, c ? h.preDeserialize(c, b) : g.newEntity(b);
        }, a.init = function() {
            a.baseInit();
            var b = a.entityType;
            a[b] = a.loadOrCreateEntity(), a.dateFormat = "MM/dd/yyyy";
        }, a.openDatePicker = function(a, b) {
            a.preventDefault(), a.stopPropagation(), b.opened = !0;
        }, a.init(), a.transform = function() {
            var b = a.entityType, c = h.serialize(a[b], a.entityType);
            return a.prettyXml = e.prettifyXml(c), a.xml = c, c;
        }, a.saveEntity = function() {
            var c = a.entityType, e = n(a.xml);
            l.show = !0, a.$parent.cloningMode ? (d.logRequest(), d.postSubmitEntity('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + e, a.entityType).success(function(c) {
                a.skipUndo = !0, d.logResponse("success", c, !1), b.go("main");
            }).error(function(a) {
                d.logResponse("error", a, !1), l.show = !1, angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            })) : (d.logRequest(), d.postUpdateEntity('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + e, a.entityType, a[c].name).success(function(c) {
                a.skipUndo = !0, d.logResponse("success", c, !1), b.go("main");
            }).error(function(a) {
                d.logResponse("error", a, !1), l.show = !1, angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            })), a.editingMode = !1, a.cloningMode = !1;
        }, a.isActive = function(a) {
            return a === b.$current.name;
        }, a.parseDate = function(a) {
            return a ? a.split("T")[0] : a;
        }, a.parseTime = function(a) {
            if (a) {
                var b = a.split("T")[1].split(":");
                return b = b[0] + ":" + b[1];
            }
            return "Not defined";
        }, a.appendVariable = function(a, b, c) {
            "${YEAR}" == a ? b[c] = b[c] ? b[c] + a : a : b[c] = b[c] ? b[c] + "-" + a : a, 
            b.focused = !1;
        };
        var o = function() {
            var b = a.entityType;
            if (a.editXmlDisabled) try {
                a.transform();
            } catch (a) {
                console.log("error when transforming xml"), console.log(a);
            } else try {
                a[b] = h.deserialize(a.prettyXml, b);
            } catch (a) {
                console.log("user entered xml incorrect format"), console.log(a);
            }
        }, p = i(o, 1e3);
        a.skipUndo = !1, a.$on("$destroy", function() {
            var b = g.newEntity("feed"), c = null == a.feed.name || "" === a.feed.name, d = null == a.feed.groups || "" === a.feed.groups, f = null === a.feed.description || "" === a.feed.description, h = angular.equals(a.feed.ACL, b.ACL), j = angular.equals(a.feed.schema, b.schema);
            i.cancel(p), a.skipUndo || c && d && f && h && j || (a.$parent.models.feedModel = angular.copy(e.xml_str2json(a.xml)), 
            a.$parent.cancel("feed", m.previousState));
        }), a.goNext = function(a, c) {
            return l.show = !0, !k.nameAvailable || a ? (k.displayValidations.show = !0, k.displayValidations.nameShow = !0, 
            void (l.show = !1)) : (k.displayValidations.show = !1, k.displayValidations.nameShow = !1, 
            void b.go(c));
        }, a.goBack = function(a) {
            l.backShow = !0, k.displayValidations.show = !1, k.displayValidations.nameShow = !1, 
            b.go(a);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.feed");
    a.controller("FeedSummaryController", [ "$scope", "$filter", "$timeout", function(a, b, c) {
        c(function() {
            angular.element(".nextBtn").trigger("focus");
        }, 500), a.transform && a.transform(), a.hasTags = function() {
            var c = b("filter")(a.feed.tags, {
                key: "!!"
            });
            return c.length > 0;
        }, a.optional = function(a, b) {
            return a ? b || a : "Not specified";
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.navHeader", [ "app.services.entity.model", "app.services.validation", "ngCookies" ]);
    a.controller("HeaderController", [ "$rootScope", "$scope", "$state", "$cookieStore", "$timeout", "EntityModel", "ValidationService", "Falcon", function(a, b, c, d, e, f, g, h) {
        b.fake = {
            focus: !1
        }, b.notifs = !1, b.responses = h.responses, b.isInForm = function(b) {
            if (a.currentState) {
                var c = a.currentState.split("."), d = c[1];
                return b === d;
            }
        }, b.resetCluster = function() {
            g.displayValidations = {
                show: !1,
                nameShow: !1
            }, angular.copy(f.defaultValues.cluster, f.clusterModel), c.go("forms.cluster.general");
        }, b.resetProcess = function() {
            g.displayValidations = {
                show: !1,
                nameShow: !1
            }, b.cloningMode = !0, b.models.processModel = null, c.go("forms.process.general");
        }, b.resetFeed = function() {
            g.displayValidations = {
                show: !1,
                nameShow: !1
            }, b.cloningMode = !0, b.models.feedModel = null, c.go("forms.feed.general");
        }, b.resetDataset = function() {
            g.displayValidations = {
                show: !1,
                nameShow: !1
            }, f.datasetModel.toImportModel = void 0, angular.copy(f.defaultValues.MirrorUIModel, f.datasetModel.UIModel), 
            b.cloningMode = !0, b.models.feedModel = null, c.go("forms.dataset.general");
        }, b.userLogged = function() {
            return !!a.isSecureMode() || !!a.userLogged() && (!(!angular.isDefined(d.get("userToken")) || null === d.get("userToken")) && (b.userToken = d.get("userToken").user, 
            !0));
        }, b.isSecureMode = function() {
            return a.isSecureMode();
        }, b.logOut = function() {
            d.put("userToken", null), c.transitionTo("login");
        }, b.restore = function(a) {
            c.go(a);
        }, b.notify = function() {
            h.notify(!0);
        }, b.hideNotifs = function() {
            h.hideNotifs();
        };
    } ]), a.filter("reverse", function() {
        return function(a) {
            return a.slice().reverse();
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.login", [ "ngMessages", "app.services" ]);
    a.controller("LoginFormCtrl", [ "$scope", "$state", "$cookieStore", "$http", "ServerAPI", function(a, b, c, d, e) {
        a.showLoginVal = {
            show: !1,
            userPassInvalid: !1
        }, a.loggUser = function(d) {
            d.$valid ? e.clearUser().then(function() {
                var d = {};
                d.timeOutLimit = a.login.timeOut, d.user = a.login.user, d.timeOut = new Date().getTime(), 
                c.put("userToken", d), b.go("main");
            }) : a.showLoginVal.show = !0;
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessClustersCtrl", [ "$scope", "clustersList", "EntityFactory", "$timeout", function(a, b, c, d) {
        function e(b) {
            a.clusterList = [];
            var c = Object.prototype.toString.call(b.entity);
            "[object Array]" === c ? a.clusterList = b.entity : "[object Object]" === c && (a.clusterList = [ b.entity ]);
        }
        d(function() {
            angular.element(".firstSelectClusterStep").trigger("focus");
        }, 500), a.init = function() {
            a.dateFormat = "MM/dd/yyyy";
        }, a.openDatePicker = function(a, b) {
            a.preventDefault(), a.stopPropagation(), b.opened = !0;
        }, a.addCluster = function() {
            a.process.clusters.push(c.newCluster());
        }, a.removeCluster = function(b) {
            b >= 0 && a.process.clusters.length > 1 && a.process.clusters.splice(b, 1);
        }, e(b), a.init();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessGeneralInformationCtrl", [ "$scope", function(a) {
        var b = {
            oozie: [ "3.1.3-incubating", "3.2.0-incubating", "3.3.0", "3.3.1", "3.3.2", "4.0.0", "4.0.1" ],
            pig: [ "pig-0.10.0", "pig-0.10.1", "pig-0.11.0", "pig-0.11.1", "pig-0.12.0", "pig-0.12.1", "pig-0.13.0", "pig-0.8.0", "pig-0.8.1", " pig-0.9.0", " pig-0.9.1", "pig-0.9.2" ],
            hive: [ "hive-0.10.0", "hive-0.11.0", "hive-0.12.0", "hive-0.13.0", "hive-0.13.1", "hive-0.6.0", "hive-0.7.0", "hive-0.8.0", "hive-0.8.1", "hive-0.9.0" ]
        };
        a.nameValid = !1, a.init = function() {
            a.versions = [];
        }, a.addTag = function() {
            a.process.tags.push({
                key: null,
                value: null
            });
        }, a.removeTag = function(b) {
            b >= 0 && a.process.tags.length > 1 && a.process.tags.splice(b, 1);
        }, a.selectWorkflow = function() {
            if (a.process.workflow) {
                var c = a.process.workflow.engine;
                a.process.workflow.version = "", a.versions = b[c];
            }
        }, a.init(), a.selectWorkflow();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessInputsAndOutputsCtrl", [ "$scope", "EntityFactory", "feedsList", "$timeout", function(a, b, c, d) {
        function e(b) {
            a.feedsList = [];
            var c = Object.prototype.toString.call(b.entity);
            "[object Array]" === c ? a.feedsList = b.entity : "[object Object]" === c && (a.feedsList = [ b.entity ]);
        }
        d(function() {
            a.process.inputs.length > 0 ? angular.element(".firstInput").trigger("focus") : a.process.outputs.length > 0 ? angular.element(".firstOutput").trigger("focus") : angular.element(".addInputButton").trigger("focus");
        }, 500), a.init = function() {}, a.addInput = function() {
            a.process.inputs.push(b.newInput());
        }, a.removeInput = function(b) {
            b >= 0 && a.process.inputs.splice(b, 1);
        }, a.addOutput = function() {
            a.process.outputs.push(b.newOutput());
        }, a.removeOutput = function(b) {
            b >= 0 && a.process.outputs.splice(b, 1);
        }, e(c), a.validateStartEndDate = function() {
            if (delete a.invalidEndDate, this.input.start && this.input.end) {
                var b = new Date(this.input.start), c = new Date(this.input.end);
                "Invalid Date" !== c.toString && "Invalid Date" !== b.toString && b > c && (a.invalidEndDate = "ng-dirty ng-invalid");
            }
        }, a.init();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessPropertiesCtrl", [ "$scope", "$timeout", function(a, b) {
        b(function() {
            angular.element("#timeZoneSelect > select").trigger("focus");
        }, 500);
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessRootCtrl", [ "$scope", "$state", "$interval", "$controller", "EntityFactory", "EntitySerializer", "X2jsService", "ValidationService", "SpinnersFlag", "$rootScope", function(a, b, c, d, e, f, g, h, i, j) {
        a.entityType = "process", d("EntityRootCtrl", {
            $scope: a
        }), a.init = function() {
            a.baseInit();
            var b = a.entityType;
            a[b] = a.loadOrCreateEntity();
        }, a.isActive = function(a) {
            return a === b.$current.name;
        }, a.loadOrCreateEntity = function() {
            var b = a.entityType, c = a.models[b + "Model"];
            return a.models[b + "Model"] = null, c ? f.preDeserialize(c, b) : e.newEntity(b);
        }, a.init(), a.transform = function() {
            var b = a.entityType, c = f.serialize(a[b], a.entityType);
            return a.prettyXml = g.prettifyXml(c), a.xml = c, c;
        };
        var k = function() {
            var b = a.entityType;
            if (a.editXmlDisabled) try {
                a.transform();
            } catch (a) {
                console.log("error when transforming xml"), console.log(a);
            } else try {
                a[b] = f.deserialize(a.prettyXml, b);
            } catch (a) {
                console.log("user entered xml incorrect format"), console.log(a);
            }
        }, l = c(k, 1e3);
        a.skipUndo = !1, a.$on("$destroy", function() {
            var b = e.newEntity("process"), d = null == a.process.name || "" === a.process.name, f = angular.equals(a.process.ACL, b.ACL), h = angular.equals(a.process.workflow, b.workflow);
            c.cancel(l), a.skipUndo || d && f && h || (a.$parent.models.processModel = angular.copy(g.xml_str2json(a.xml)), 
            a.$parent.cancel("process", j.previousState));
        }), a.goNext = function(a, c) {
            return i.show = !0, !h.nameAvailable || a ? (h.displayValidations.show = !0, h.displayValidations.nameShow = !0, 
            void (i.show = !1)) : (h.displayValidations.show = !1, h.displayValidations.nameShow = !1, 
            void b.go(c));
        }, a.goBack = function(a) {
            i.backShow = !0, h.displayValidations.show = !1, h.displayValidations.nameShow = !1, 
            b.go(a);
        }, a.goTest = function(a) {
            console.log(a);
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.process");
    a.controller("ProcessSummaryCtrl", [ "$scope", "$state", "$timeout", "$filter", "Falcon", "SpinnersFlag", function(a, b, c, d, e, f) {
        c(function() {
            angular.element(".nextBtn").trigger("focus");
        }, 500), a.init = function() {
            a.transform && a.transform();
        }, a.hasTags = function() {
            var b = d("filter")(a.process.tags, {
                key: "!!"
            });
            return b.length > 0;
        }, a.optional = function(a, b) {
            return a ? b || a : "Not specified";
        }, a.saveEntity = function() {
            var c = a.entityType;
            f.show = !0, a.$parent.cloningMode ? (e.logRequest(), e.postSubmitEntity('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + a.xml, a.entityType).success(function(c) {
                a.$parent.skipUndo = !0, e.logResponse("success", c, !1), b.go("main");
            }).error(function(a) {
                e.logResponse("error", a, !1), f.show = !1, angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            })) : (e.logRequest(), e.postUpdateEntity('<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' + a.xml, a.entityType, a[c].name).success(function(c) {
                a.$parent.skipUndo = !0, e.logResponse("success", c, !1), b.go("main");
            }).error(function(a) {
                f.show = !1, e.logResponse("error", a, !1), angular.element("body, html").animate({
                    scrollTop: 0
                }, 300);
            })), a.editingMode = !1, a.cloningMode = !1;
        }, a.init();
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.controllers.rootCtrl", [ "app.services" ]);
    a.controller("RootCtrl", [ "$scope", "$timeout", "Falcon", "FileApi", "EntityModel", "$state", "X2jsService", "ValidationService", "SpinnersFlag", "EntityFalcon", function(a, b, c, d, e, f, g, h, i, j) {
        var k = 10;
        a.server = c, a.validations = h, a.buttonSpinners = i, a.models = {}, a.pages = [], 
        a.nextPages = !1, a.handleFile = function(b) {
            c.logRequest(), d.loadFile(b).then(function() {
                "Type not recognized" === e.type ? c.logResponse("error", {
                    status: "ERROR",
                    message: "Invalid xml. File not uploaded"
                }, !1) : c.postSubmitEntity(d.fileRaw, e.type).success(function(b) {
                    c.logResponse("success", b, !1), a.refreshList(a.tags);
                }).error(function(a) {
                    c.logResponse("error", a, !1);
                });
            });
        }, a.goPage = function(d) {
            a.loading = !0;
            var e = (d - 1) * k;
            j.searchEntities(a.entityName, a.entityTags, a.entityType, e).then(function() {
                if (null !== j.data) {
                    a.actualPage = d, a.searchList = j.data.entity;
                    var e = Math.ceil(j.data.totalResults / k);
                    a.pages = [];
                    for (var f = 0; f < e; f++) a.pages[f] = {}, a.pages[f].index = f + 1, a.pages[f].label = "" + (f + 1), 
                    d === f + 1 ? a.pages[f].enabled = !1 : a.pages[f].enabled = !0;
                    0 === a.searchList.length && c.warningMessage("No results matched the search criteria."), 
                    b(function() {
                        angular.element("#tagsInput").focus();
                    }, 0, !1), c.responses.listLoaded = !0, a.loading = !1;
                }
            });
        }, a.refreshList = function(c) {
            a.nameFounded = !1, a.typeFounded = !1, a.entityName = "", a.entityType = "";
            var d = "";
            if (a.searchList = [], void 0 === c || 0 === c.length) return void b(function() {
                angular.element("#tagsInput").focus();
            }, 0, !1);
            for (var e = 0; e < c.length; e++) {
                var f = c[e].text;
                f.indexOf("Name:") !== -1 ? (a.nameFounded = !0, f = f.substring(5), a.entityName = f) : f.indexOf("Type:") !== -1 ? (a.typeFounded = !0, 
                f = f.substring(5), a.entityType = f) : (f = f.substring(4), d += f, e < c.length - 1 && (d += ","));
            }
            a.entityTags = d, a.goPage(1);
        }, a.cancel = function(a, b) {
            var d = {
                state: b || f.current.name,
                message: a + " edition canceled "
            };
            c.logResponse("cancel", d, a, !1);
        };
    } ]);
}(), function() {
    "use strict";
    angular.module("dateHelper", []).factory("DateHelper", function() {
        var a = function(a) {
            return a < 10 && (a = "0" + a), a;
        }, b = {};
        return b.importDate = function(a, b) {
            b && "UTC" !== b || (b = "GMT+00:00");
            var c = Date.parse(a), d = parseInt(b.slice(3)), e = new Date(c + 36e5 * d);
            return new Date(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate(), e.getUTCHours(), e.getUTCMinutes(), 0, 0);
        }, b.createISO = function(a, b, c) {
            var d = new Date(Date.UTC(a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate(), b.getHours(), b.getMinutes(), 0, 0)).toUTCString() + c.slice(3), e = Date.parse(d), f = new Date(e).toISOString();
            return f.slice(0, -8) + "Z";
        }, b.createISOString = function(b, c) {
            var d = b.getFullYear() + "-" + a(b.getMonth() + 1) + "-" + a(b.getDate()) + "T" + a(c.getHours()) + ":" + a(c.getMinutes()) + "Z";
            return d;
        }, b;
    });
}(), function() {
    "use strict";
    var a = angular.module("app.services.falcon", [ "app.services.x2js", "ngCookies" ]);
    a.factory("Falcon", [ "$http", "X2jsService", "$location", "$rootScope", "$cookieStore", "$timeout", function(a, b, c, d, e, f) {
        function g(a, b) {
            return d.ambariView() && (a = a.substring(2), a = d.serviceURI + a), d.secureMode || b || (a = h(a)), 
            console.log(a), a;
        }
        function h(a) {
            var b = e.get("userToken"), c = a.indexOf("?") !== -1 ? "&" : "?";
            return a = a + c + "user.name=" + b.user;
        }
        var i = {}, j = 10, k = 11;
        return i.orderBy = {
            enable: !1,
            name: "asc"
        }, i.responses = {
            display: !0,
            queue: [],
            count: {
                pending: 0,
                success: 0,
                error: 0
            },
            multiRequest: {
                cluster: 0,
                feed: 0,
                process: 0
            },
            listLoaded: {
                cluster: !1,
                feed: !1,
                process: !1
            }
        }, i.logRequest = function() {
            i.responses.count.pending = i.responses.count.pending + 1;
        }, i.responses.showAll = !1, i.responses.isVisible = !1, i.hide = function() {
            i.hideTimeout = f(function() {
                $(".notifs").fadeOut(300);
            }, 5e3);
        }, i.responses.unreaded = 0, i.notify = function(a) {
            $(".notifs").stop(), f.cancel(i.hideTimeout), a ? (i.responses.unreaded = 0, i.responses.isVisible ? (i.responses.isVisible = !1, 
            $(".notifs").fadeOut(300)) : (i.responses.isVisible = !0, $(".notifs").hide(), $(".notifs").fadeIn(300)), 
            i.responses.showAll = !0) : (i.responses.unreaded++, i.responses.isVisible = !1, 
            $(".notifs").stop(), $(".notifs").hide(), $(".notifs").fadeIn(300), $(".notifs").fadeOut(300), 
            $(".notifs").fadeIn(300), $(".notifs").fadeOut(300), $(".notifs").fadeIn(300), i.hide(), 
            i.responses.showAll = !1);
        }, i.hideNotifs = function() {
            $(".notifs").stop(), f.cancel(i.hideTimeout), i.responses.isVisible = !1, $(".notifs").fadeOut(300), 
            i.responses.queue.forEach(function(a) {
                a.readed = !0;
            });
        }, i.logResponse = function(a, c, d, e) {
            if ("success" === a) {
                if (!e) {
                    var f = {
                        success: !0,
                        type: "success",
                        status: c.status,
                        message: c.message,
                        requestId: c.requestId,
                        readed: !1
                    };
                    i.responses.queue.push(f), i.responses.count.success = i.responses.count.success + 1, 
                    i.notify(!1);
                }
                i.responses.count.pending = i.responses.count.pending - 1;
            }
            if ("cancel" === a && !e) {
                var f = {
                    success: !0,
                    type: "cancel",
                    status: c.state,
                    state: c.state,
                    message: c.message,
                    model: c.model,
                    readed: !1
                };
                return i.responses.queue.push(f), void i.notify(!1);
            }
            if ("error" === a) {
                if (void 0 !== c.status) var f = {
                    success: !1,
                    type: "error",
                    status: c.status,
                    message: c.message,
                    requestId: c.requestId,
                    readed: !1
                }; else if ("Cannot" !== c.slice(0, 6)) var g = b.xml_str2json(c), f = {
                    success: !1,
                    type: "error",
                    status: g.result ? g.result.status : "error",
                    message: g.result ? g.result.message : "Unexpected Error",
                    requestId: g.result ? g.result.requestId : 0,
                    readed: !1
                }; else var f = {
                    success: !1,
                    type: "error",
                    status: "No connection",
                    message: c,
                    requestId: "no ID",
                    readed: !1
                };
                if (e) return void (i.responses.count.pending = i.responses.count.pending - 1);
                i.responses.queue.push(f), i.responses.count.error = i.responses.count.error + 1, 
                i.responses.count.pending = i.responses.count.pending - 1, i.notify(!1);
            }
            if ("warning" === a && !e) {
                var f = {
                    success: !0,
                    type: "warning",
                    status: c.status,
                    message: c.message,
                    model: "",
                    readed: !1
                };
                return i.responses.queue.push(f), void i.notify(!1);
            }
            d && d !== !1 && (d = d.toLowerCase(), i.responses.multiRequest[d] = i.responses.multiRequest[d] - 1);
        }, i.removeMessage = function(a) {
            a === -1 && (a = i.responses.queue.length - 1), i.responses.queue[a].success ? i.responses.count.success = i.responses.count.success - 1 : i.responses.count.error = i.responses.count.error - 1, 
            i.responses.queue.splice(a, 1);
        }, i.errorMessage = function(a) {
            var b = {
                type: "error",
                message: a,
                readed: !1
            };
            i.responses.queue.push(b), i.notify(!1);
        }, i.warningMessage = function(a) {
            var b = {
                type: "warning",
                message: a,
                readed: !1
            };
            i.responses.queue.push(b), i.notify(!1);
        }, i.getServerConfig = function() {
            return a.get(g("../api/admin/version?user.name=falcon", !0));
        }, i.getServerStack = function() {
            return a.get(g("../api/admin/stack"));
        }, i.clearUser = function() {
            return a.get(g("../api/admin/clearuser?user.name=falcon", !0));
        }, i.getCurrentUser = function() {
            return a.get(g("../api/admin/getuser", !0));
        }, i.postValidateEntity = function(b, c) {
            return a.post(g("../api/entities/validate/" + c), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, i.postSubmitEntity = function(b, c) {
            return a.post(g("../api/entities/submit/" + c), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, i.postUpdateEntity = function(b, c, d) {
            return a.post(g("../api/entities/update/" + c + "/" + d), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, i.postScheduleEntity = function(b, c) {
            return a.post(g("../api/entities/schedule/" + b + "/" + c));
        }, i.postSuspendEntity = function(b, c) {
            return a.post(g("../api/entities/suspend/" + b + "/" + c));
        }, i.postResumeEntity = function(b, c) {
            return a.post(g("../api/entities/resume/" + b + "/" + c));
        }, i.deleteEntity = function(b, c) {
            return a.delete(g("../api/entities/delete/" + b + "/" + c));
        }, i.getEntities = function(b) {
            return a.get(g("../api/entities/list/" + b + "?fields=status,tags&numResults=" + j));
        }, i.getEntityDefinition = function(b, c) {
            return a.get(g("../api/entities/definition/" + b + "/" + c), {
                headers: {
                    Accept: "text/plain"
                }
            });
        }, i.searchEntities = function(b, c, d, e, f) {
            var h = "../api/entities/list/";
            return void 0 !== d && "" !== d ? "mirror" === d ? (void 0 === c || "" === c ? c = "_falcon_mirroring_type" : c += ",_falcon_mirroring_type", 
            h += "process") : h += d : h += "feed,process", h += "?fields=clusters,tags,status", 
            void 0 !== b && "" !== b && "*" !== b && (h += "&nameseq=" + b), void 0 !== c && "" !== c && (h += "&tagkeys=" + c), 
            void 0 !== e && "" !== e && (h += "&offset=" + e + "&numResults=" + j), i.orderBy.enable && (h += "&orderBy=name&sortOrder=" + i.orderBy.name), 
            a.get(g(h));
        }, i.searchInstances = function(b, c, d, e, f, h, i, j) {
            var l = "../api/instance/logs/" + b + "/" + c + "?colo=*";
            return void 0 !== e && "" !== e && (l += "&start=" + e), void 0 !== f && "" !== f && (l += "&end=" + f), 
            void 0 !== h && "" !== h && (l += "&filterBy=STATUS:" + h), l += void 0 !== i && "" !== i ? "&orderBy=" + i : "&orderBy=startTime", 
            void 0 !== j && "" !== j && (l += "&sortOrder=" + j), l += "&offset=" + d + "&numResults=" + k, 
            a.get(g(l));
        }, i.getInstanceLog = function(b) {
            return a.get(g(b), {
                headers: {
                    Accept: "text/plain"
                }
            });
        }, i.postResumeInstance = function(b, c, d, e) {
            return a.post(g("../api/instance/resume/" + b + "/" + c + "?colo=*&start=" + d + "&end=" + e));
        }, i.postSuspendInstance = function(b, c, d, e) {
            return a.post(g("../api/instance/suspend/" + b + "/" + c + "?colo=*&start=" + d + "&end=" + e));
        }, i.postKillInstance = function(b, c, d, e) {
            return a.post(g("../api/instance/kill/" + b + "/" + c + "?colo=*&start=" + d + "&end=" + e));
        }, i.postReRunInstance = function(b, c, d, e) {
            return a.post(g("../api/instance/rerun/" + b + "/" + c + "?colo=*&start=" + d + "&end=" + e));
        }, i.getEntityDependencies = function(b, c) {
            return a.get(g("../api/entities/dependencies/" + b + "/" + c));
        }, i.getInstanceVertices = function(b) {
            return a.get(g("../api/metadata/lineage/vertices?key=name&value=" + b));
        }, i.getInstanceVerticesDirection = function(b, c) {
            return a.get(g("../api/metadata/lineage/vertices/" + b + "/" + c));
        }, i.getInstanceVerticesProps = function(b) {
            return a.get(g("../api/metadata/lineage/vertices/properties/" + b + "?relationships=true"));
        }, i.getInstancesSummary = function(b, c, d, e) {
            return a.get(g("../api/instance/summary/" + b + "/" + c + "?start=" + d + "&end=" + e));
        }, i.getTopEntities = function(b, c, d) {
            return a.get(g("../api/entities/top/" + b + "?start=" + c + "&end=" + d));
        }, i.postSubmitRecipe = function(b) {
            return a.post(g("../api/entities/prepareAndSubmitRecipe"), b, {
                headers: {
                    "Content-Type": "text/plain"
                }
            });
        }, i;
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.services.fileapi", [ "app.services.entity.model" ]);
    a.factory("FileApi", [ "$http", "$q", "EntityModel", function(a, b, c) {
        var d = {};
        return d.supported = window.File && window.FileReader && window.FileList && window.Blob, 
        d.errorMessage = "The File APIs are not fully supported in this browser.", d.fileDetails = "No file loaded", 
        d.fileRaw = "No file loaded", d.loadFile = function(a) {
            if (d.supported) {
                var e = b.defer(), f = new FileReader(), g = a.target.files[0];
                return f.onload = function(a) {
                    return f.readAsText(a, "UTF-8"), function(b) {
                        d.fileRaw = b.target.result, d.fileDetails = a, c.getJson(d.fileRaw), e.resolve();
                    };
                }(g), e.promise;
            }
            alert(d.errorMessage);
        }, d;
    } ]);
}(), function() {
    "use strict";
    function a(a, c, d) {
        return new b(a, c || a, d);
    }
    function b(b, c, d) {
        function e(a, b) {
            for (var c, d = a, e = 0, h = b.length - 1; e < h; e++) c = b[e], f(d, c), d = d[c];
            return new g(d, b[b.length - 1]);
        }
        function f(a, b) {
            a[b] || (a[b] = {});
        }
        function g(a, b) {
            this.target = a, this.child = b, this.get = function() {
                return a[b];
            }, this.set = function(c) {
                a[b] = c;
            };
        }
        function h(b, c) {
            var d = this;
            d.firstTransformation = b, d.secondTransformation = c, d.apply = function(a, b) {
                return d.firstTransformation.apply(a, b), d.secondTransformation.apply(a, b), b;
            }, d.transform = function(b, c, e) {
                return new h(d, a(b, c, e));
            };
        }
        var i = this;
        i.sourceFieldPath = b.split("."), i.targetFieldPath = c.split("."), i.mappingCallback = d, 
        i.transform = function(b, c, d) {
            return new h(i, a(b, c, d));
        }, i.apply = function(a, b) {
            var c = e(a, i.sourceFieldPath), d = c.get();
            if (d = d && i.mappingCallback ? i.mappingCallback(d) : d) {
                var f = e(b, i.targetFieldPath);
                f.set(d);
            }
            return b;
        };
    }
    var c = angular.module("app.services.json.transformer", []);
    c.factory("JsonTransformerFactory", function() {
        return {
            transform: a
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.services.server", [ "app.services" ]);
    a.factory("ServerAPI", [ "Falcon", "$q", "$rootScope", function(a, b, c) {
        var d = {};
        return d.getServerConfig = function() {
            var e = b.defer();
            return a.logRequest(), a.getServerConfig().success(function(b) {
                a.logResponse("success", b, !1, !0), d.data = b, e.resolve();
            }).error(function(b, d) {
                c.httpError = {
                    error: b,
                    code: d
                }, a.logResponse("error", b), e.resolve();
            }), e.promise;
        }, d.setOptions = function(d) {
            var e = b.defer();
            return a.logRequest(), a.setOptions(d).success(function(b) {
                a.logResponse("success", b, !1, !0), e.resolve();
            }).error(function(b, d) {
                c.httpError = {
                    error: b,
                    code: d
                }, a.logResponse("error", b), e.resolve();
            }), e.promise;
        }, d.clearUser = function() {
            var e = b.defer();
            return a.logRequest(), a.clearUser().success(function(b) {
                a.logResponse("success", b, !1, !0), d.setted = b, e.resolve();
            }).error(function(b, d) {
                c.httpError = {
                    error: b,
                    code: d
                }, a.logResponse("error", b), e.resolve();
            }), e.promise;
        }, d.getCurrentUser = function() {
            var e = b.defer();
            return a.logRequest(), a.getCurrentUser().success(function(b) {
                a.logResponse("success", b, !1, !0), d.user = b, e.resolve();
            }).error(function(b, d) {
                c.httpError = {
                    error: b,
                    code: d
                }, a.logResponse("error", b), e.resolve();
            }), e.promise;
        }, d;
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.services.validation", []);
    a.factory("ValidationService", [ "$window", function(a) {
        function b(b) {
            var c = b || a.event, d = c.keyCode || c.which, e = 8, f = 46, g = 13, h = {
                left: 37,
                right: 39
            }, i = 9, j = /[0-9]|\./;
            return d === e || d === f || d === h.left || d === h.right || d === i || d === g || (d = String.fromCharCode(d), 
            void (j.test(d) || (c.returnValue = !1, c.preventDefault && c.preventDefault())));
        }
        function c(b) {
            var c = b || a.event, d = c.keyCode || c.which, e = 32;
            if (d === e) return c.returnValue = !1, c.preventDefault(), !1;
        }
        var d = {
            name: {
                patternInvalid: "The name has an invalid format.",
                unavailable: "The name you choosed is not available",
                empty: "You need to specify a name"
            },
            colo: {
                empty: "You need to provide a colo",
                patternInvalid: "The Colo has an invalid format. "
            },
            description: {
                empty: "You need to provide a description",
                patternInvalid: "The Description has an invalid format. "
            },
            path: {
                empty: "You need to provide a path",
                patternInvalid: "The Path has an invalid format. "
            },
            key: {
                empty: "You need to provide a key",
                patternInvalid: "The Key has an invalid format. "
            },
            value: {
                empty: "You need to provide a value",
                patternInvalid: "The Value has an invalid format. "
            },
            location: {
                empty: "You need to provide a  location",
                patternInvalid: "The Location has an invalid format. "
            },
            provider: {
                empty: "You need to provide a provider",
                patternInvalid: "The provider has an invalid format. "
            },
            acl: {
                owner: {
                    empty: "You need to provide an owner",
                    patternInvalid: "The Owner has an invalid format. "
                },
                group: {
                    empty: "You need to provide a group",
                    patternInvalid: "The Group has an invalid format. "
                },
                permission: {
                    empty: "You need to provide a Permission",
                    patternInvalid: "The Permission has an invalid format. "
                }
            },
            engine: {
                empty: "You need to select an engine"
            },
            cluster: {
                empty: "You need to select a cluster"
            },
            feed: {
                empty: "You need to select a feed"
            },
            date: {
                empty: "You need to select a date",
                startAfterEnd: "Start date must be before end date.",
                patternInvalid: "The start Date has an invalid format. "
            },
            number: {
                empty: "You need to provide a number",
                patternInvalid: "The number needs to be one or two digits "
            },
            option: {
                empty: "You need to select an option"
            },
            user: {
                empty: "Please enter your user name.",
                patternInvalid: "The User has an invalid format."
            },
            password: {
                empty: "Please enter your password.",
                patternInvalid: "The Password has an invalid format."
            },
            email: {
                patternInvalid: "The email is invalid."
            },
            allocationNumber: {
                empty: "You need to provide a number",
                patternInvalid: "The number you provided is invalid "
            },
            permission: {
                empty: "You need to provide a Permission",
                patternInvalid: "The Permission has an invalid format. "
            },
            url: {
                empty: "You need to provide a URL",
                patternInvalid: "The URL has an invalid format. "
            },
            databases: {
                empty: "You need to provide the databases",
                patternInvalid: "The Databases have an invalid format. "
            },
            database: {
                empty: "You need to provide the database",
                patternInvalid: "The database has an invalid format. "
            },
            tables: {
                empty: "You need to provide the tables",
                patternInvalid: "The tables have an invalid format. "
            },
            s3: {
                empty: "You need to provide a S3 URL",
                patternInvalid: "The URL has an invalid format. It needs to start with 's3' and end with '.amazonaws.com'"
            },
            azure: {
                empty: "You need to provide an Azure URL",
                patternInvalid: "The URL has an invalid format. It needs to end with '.blob.core.windows.net'"
            },
            versionNumbers: {
                patternInvalid: "The version is invalid"
            }
        }, e = {
            name: new RegExp("^[a-zA-Z0-9-_]{1,60}$"),
            id: new RegExp("^(([a-zA-Z]([\\-a-zA-Z0-9_])*){1,39})$"),
            password: new RegExp("^(([a-zA-Z]([\\-a-zA-Z0-9])*){1,39})$"),
            freeText: new RegExp("^([\\sa-zA-Z0-9]){1,40}$"),
            textarea: new RegExp("^([\\sa-zA-Z0-9,]){1,100}$"),
            alpha: new RegExp("^([a-zA-Z0-9-_]){1,100}$"),
            commaSeparated: new RegExp("^[a-zA-Z0-9,]{1,80}$"),
            unixId: new RegExp("^([a-zA-Z_][a-zA-Z0-9-_\\.\\-]{0,30})$"),
            unixPermissions: new RegExp("^((([x0-7]){1,5})|(\\*))$"),
            aclPermissions: new RegExp("^(0?[0-7]{3}|\\*)$"),
            osPath: new RegExp("^[^\\0]+$"),
            twoDigits: new RegExp("^([0-9]){1,4}$"),
            tableUri: new RegExp("^[^\\0]+$"),
            versionNumbers: new RegExp("^[0-9.]+$"),
            url: new RegExp("^[^\\0 ]+\\.[a-zA-Z0-9]{1,3}$"),
            number: new RegExp("^([-0-9]){1,40}$"),
            email: new RegExp("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$"),
            s3: new RegExp("^s3[a-zA-Z0-9._%+-:\\/]+\\.amazonaws.com$"),
            azure: new RegExp("^[a-zA-Z0-9._%+-:@\\/]+\\.blob.core.windows.net$")
        };
        return {
            messages: d,
            patterns: e,
            nameAvailable: !0,
            displayValidations: {
                show: !1,
                nameShow: !1
            },
            acceptOnlyNumber: b,
            acceptNoSpaces: c
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.services.x2js", []);
    a.factory("X2jsService", function() {
        var a = new X2JS({
            arrayAccessFormPaths: [ "feed.properties.property", "feed.locations.location", "feed.clusters.cluster", "feed.clusters.cluster.locations.location", "cluster.properties.property", "cluster.locations.location", "process.clusters.cluster", "process.inputs.input", "process.outputs.output" ]
        });
        return {
            xml_str2json: function(b) {
                return a.xml_str2json(b);
            },
            json2xml_str: function(b) {
                return a.json2xml_str(b);
            },
            prettifyXml: function(a) {
                var b = "", c = /(>)(<)(\/*)/g;
                a = a.replace(c, "$1\r\n$2$3");
                var d = 0;
                return jQuery.each(a.split("\r\n"), function(a, c) {
                    var e = 0;
                    c.match(/.+<\/\w[^>]*>$/) ? e = 0 : c.match(/^<\/\w/) ? 0 !== d && (d -= 1) : e = c.match(/^<\w[^>]*[^\/]>.*$/) ? 1 : 0;
                    for (var f = "", g = 0; g < d; g++) f += "  ";
                    b += f + c + "\r\n", d += e;
                }), b;
            }
        };
    });
}(), function() {
    "use strict";
    function a() {
        this.name = "", this.description = null, this.groups = null, this.tags = [ new h(null, null) ], 
        this.ACL = new b(), this.schema = new c(), this.frequency = new g(null, "hours"), 
        this.lateArrival = new f(), this.availabilityFlag = null, this.properties = d(), 
        this.customProperties = [ new h(null, null) ], this.storage = new i(), this.clusters = [ new p("source", (!0)) ], 
        this.timezone = "";
    }
    function b() {
        this.owner = x, this.group = "users", this.permission = "0755";
    }
    function c() {
        this.location = void 0, this.provider = void 0;
    }
    function d() {
        return [ new h("queueName", ""), new h("jobPriority", ""), new h("timeout", ""), new h("parallel", ""), new h("maxMaps", ""), new h("mapBandwidthKB", "") ];
    }
    function e() {
        return [ new h(null, null) ];
    }
    function f() {
        this.active = !1, this.cutOff = new g(null, "hours");
    }
    function g(a, b) {
        this.quantity = a, this.unit = b;
    }
    function h(a, b) {
        this.key = a, this.value = b;
    }
    function i() {
        this.fileSystem = new m(), this.catalog = new k();
    }
    function j() {
        this.fileSystem = new n(), this.catalog = new k();
    }
    function k() {
        this.active = !1, this.catalogTable = new l();
    }
    function l() {
        this.uri = null, this.focused = !1;
    }
    function m() {
        this.active = !0, this.locations = [ new o("data", "/"), new o("stats", "/"), new o("meta", "/") ];
    }
    function n() {
        this.active = !1, this.locations = [ new o("data", ""), new o("stats", ""), new o("meta", "") ];
    }
    function o(a, b) {
        this.type = a, this.path = b, this.focused = !1;
    }
    function p(a, b) {
        this.name = "", this.type = a, this.selected = b, this.retention = new g(null, "hours"), 
        this.retention.action = "delete", this.validity = new q(), this.storage = new j();
    }
    function q() {
        this.start = new r(), this.end = new r(), this.timezone = "";
    }
    function r() {
        this.date = new Date(), this.time = new Date(), this.opened = !1;
    }
    function s() {
        this.name = null, this.tags = [ new h(null, null) ], this.workflow = new t(), this.timezone = "", 
        this.frequency = new g(null, "hours"), this.parallel = 1, this.order = "", this.retry = new u(), 
        this.clusters = [ new p("source", (!0)) ], this.inputs = [], this.outputs = [], 
        this.ACL = new b();
    }
    function t() {
        this.name = "", this.engine = "", this.version = "", this.path = "/";
    }
    function u() {
        this.policy = "", this.attempts = null, this.delay = new g(null, "");
    }
    function v() {
        this.name = null, this.feed = "", this.start = null, this.end = null, this.optional = !1;
    }
    function w() {
        this.name = null, this.feed = "", this.outputInstance = null;
    }
    var x, y = angular.module("app.services.entity.factory", []);
    y.factory("EntityFactory", [ "$cookieStore", function(b) {
        return x = null !== b.get("userToken") && void 0 !== b.get("userToken") ? b.get("userToken").user : "", 
        {
            newFeed: function() {
                return new a();
            },
            newFeedProperties: function() {
                return d();
            },
            newFeedCustomProperties: function() {
                return e();
            },
            newFrequency: function(a, b) {
                return new g(a, b);
            },
            newLocation: function(a, b) {
                return new o(a, b);
            },
            newCluster: function(a, b) {
                return new p(a, b);
            },
            newEntry: function(a, b) {
                return new h(a, b);
            },
            newProcess: function() {
                return new s();
            },
            newInput: function() {
                return new v();
            },
            newOutput: function() {
                return new w();
            },
            newEntity: function(a) {
                return "feed" === a ? this.newFeed() : "process" === a ? this.newProcess() : void 0;
            }
        };
    } ]);
}(), function() {
    "use strict";
    function a() {
        this.messages = {
            error: [],
            info: []
        };
    }
    function b(a, b) {
        this.title = a, this.detail = b;
    }
    var c = angular.module("app.services.messages", []), d = new a();
    c.factory("MessagesService", [ function() {
        return d;
    } ]), a.prototype.validateCategory = function(a) {
        if (!this.messages[a]) throw new Error("Category not registered");
    }, a.prototype.push = function(a, c, d) {
        this.validateCategory(a), this.messages[a].push(new b(c, d));
    }, a.prototype.pop = function(a) {
        return this.validateCategory(a), this.messages[a].pop();
    };
}(), function() {
    "use strict";
    var a = angular.module("app.services.entity.model", [ "ngCookies" ]);
    a.factory("EntityModel", [ "X2jsService", "$cookieStore", function(a, b) {
        var c, d = {};
        return d.json = null, d.detailsPageModel = null, d.identifyType = function(a) {
            a && a.feed ? d.type = "feed" : a && a.cluster ? d.type = "cluster" : a && a.process ? d.type = "process" : d.type = "Type not recognized";
        }, d.getJson = function(b) {
            return d.json = a.xml_str2json(b), d.identifyType(d.json);
        }, c = b.get("userToken") ? b.get("userToken").user : "", d.defaultValues = {
            cluster: {
                cluster: {
                    tags: "",
                    interfaces: {
                        interface: [ {
                            _type: "readonly",
                            _endpoint: "hftp://sandbox.hortonworks.com:50070",
                            _version: "2.2.0"
                        }, {
                            _type: "write",
                            _endpoint: "hdfs://sandbox.hortonworks.com:8020",
                            _version: "2.2.0"
                        }, {
                            _type: "execute",
                            _endpoint: "sandbox.hortonworks.com:8050",
                            _version: "2.2.0"
                        }, {
                            _type: "workflow",
                            _endpoint: "http://sandbox.hortonworks.com:11000/oozie/",
                            _version: "4.0.0"
                        }, {
                            _type: "messaging",
                            _endpoint: "tcp://sandbox.hortonworks.com:61616?daemon=true",
                            _version: "5.1.6"
                        } ]
                    },
                    locations: {
                        location: [ {
                            _name: "staging",
                            _path: ""
                        }, {
                            _name: "temp",
                            _path: ""
                        }, {
                            _name: "working",
                            _path: ""
                        }, {
                            _name: "",
                            _path: ""
                        } ]
                    },
                    ACL: {
                        _owner: c,
                        _group: "users",
                        _permission: "0755"
                    },
                    properties: {
                        property: [ {
                            _name: "",
                            _value: ""
                        } ]
                    },
                    _xmlns: "uri:falcon:cluster:0.1",
                    _name: void 0,
                    _description: void 0,
                    _colo: void 0
                }
            },
            MirrorUIModel: {
                name: void 0,
                tags: {
                    newTag: {
                        value: "",
                        key: ""
                    },
                    tagsArray: [ {
                        key: "_falcon_mirroring_type",
                        value: "HDFS"
                    } ],
                    tagsString: ""
                },
                formType: "HDFS",
                runOn: "target",
                source: {
                    location: "HDFS",
                    cluster: "",
                    url: "",
                    path: "",
                    hiveDatabaseType: "databases",
                    hiveDatabases: "",
                    hiveDatabase: "",
                    hiveTables: ""
                },
                target: {
                    location: "HDFS",
                    cluster: "",
                    url: "",
                    path: ""
                },
                alerts: {
                    alert: {
                        email: ""
                    },
                    alertsArray: []
                },
                validity: {
                    start: function() {
                        var a = new Date();
                        return a.setHours(0), a.setMinutes(0), a.setSeconds(0), a;
                    }(),
                    startTime: new Date(),
                    end: "",
                    endTime: new Date(),
                    tz: "GMT+00:00",
                    startISO: "",
                    endISO: ""
                },
                frequency: {
                    number: 5,
                    unit: "minutes"
                },
                allocation: {
                    hdfs: {
                        maxMaps: "5",
                        maxBandwidth: "100"
                    },
                    hive: {
                        maxMapsDistcp: "1",
                        maxMapsMirror: "5",
                        maxMapsEvents: "-1",
                        maxBandwidth: "100"
                    }
                },
                hiveOptions: {
                    source: {
                        stagingPath: "",
                        hiveServerToEndpoint: ""
                    },
                    target: {
                        stagingPath: "",
                        hiveServerToEndpoint: ""
                    }
                },
                retry: {
                    policy: "periodic",
                    delay: {
                        unit: "minutes",
                        number: 30
                    },
                    attempts: 3
                },
                acl: {
                    owner: c,
                    group: "users",
                    permissions: "0755"
                }
            }
        }, d.clusterModel = {}, d.feedModel = {
            feed: {
                tags: "",
                groups: "",
                frequency: "",
                "late-arrival": {
                    "_cut-off": ""
                },
                clusters: [ {
                    cluster: {
                        validity: {
                            _start: "",
                            _end: ""
                        },
                        retention: {
                            _limit: "",
                            _action: ""
                        },
                        _name: "",
                        _type: "source"
                    }
                } ],
                locations: {
                    location: [ {
                        _type: "data",
                        _path: "/none"
                    }, {
                        _type: "stats",
                        _path: "/none"
                    }, {
                        _type: "meta",
                        _path: "/none"
                    } ]
                },
                ACL: {
                    _owner: c,
                    _group: "users",
                    _permission: "0755"
                },
                schema: {
                    _location: "/none",
                    _provider: "none"
                },
                _xmlns: "uri:falcon:feed:0.1",
                _name: "",
                _description: ""
            }
        }, d.datasetModel = {
            toImportModel: void 0,
            UIModel: {},
            HDFS: {
                process: {
                    tags: "",
                    clusters: {
                        cluster: [ {
                            validity: {
                                _start: "2015-03-13T00:00Z",
                                _end: "2016-12-30T00:00Z"
                            },
                            _name: "primaryCluster"
                        } ]
                    },
                    parallel: "1",
                    order: "LAST_ONLY",
                    frequency: "minutes(5)",
                    timezone: "UTC",
                    properties: {
                        property: [ {
                            _name: "oozie.wf.subworkflow.classpath.inheritance",
                            _value: "true"
                        }, {
                            _name: "distcpMaxMaps",
                            _value: "5"
                        }, {
                            _name: "distcpMapBandwidth",
                            _value: "100"
                        }, {
                            _name: "drSourceDir",
                            _value: "/user/hrt_qa/dr/test/srcCluster/input"
                        }, {
                            _name: "drTargetDir",
                            _value: "/user/hrt_qa/dr/test/targetCluster/input"
                        }, {
                            _name: "drTargetClusterFS",
                            _value: "hdfs://240.0.0.10:8020"
                        }, {
                            _name: "drSourceClusterFS",
                            _value: "hdfs://240.0.0.10:8020"
                        }, {
                            _name: "drNotificationReceivers",
                            _value: ""
                        }, {
                            _name: "targetCluster",
                            _value: ""
                        }, {
                            _name: "sourceCluster",
                            _value: ""
                        } ]
                    },
                    workflow: {
                        _name: "hdfs-dr-workflow",
                        _engine: "oozie",
                        _path: "/apps/data-mirroring/workflows/hdfs-replication-workflow.xml",
                        _lib: ""
                    },
                    retry: {
                        _policy: "periodic",
                        _delay: "minutes(30)",
                        _attempts: "3"
                    },
                    ACL: {
                        _owner: "hrt_qa",
                        _group: "users",
                        _permission: "0755"
                    },
                    _xmlns: "uri:falcon:process:0.1",
                    _name: "hdfs-replication-adtech"
                }
            },
            HIVE: {
                process: {
                    tags: "",
                    clusters: {
                        cluster: [ {
                            validity: {
                                _start: "2015-03-14T00:00Z",
                                _end: "2016-12-30T00:00Z"
                            },
                            _name: "primaryCluster"
                        } ]
                    },
                    parallel: "1",
                    order: "LAST_ONLY",
                    frequency: "minutes(3)",
                    timezone: "UTC",
                    properties: {
                        property: [ {
                            _name: "oozie.wf.subworkflow.classpath.inheritance",
                            _value: "true"
                        }, {
                            _name: "distcpMaxMaps",
                            _value: "1"
                        }, {
                            _name: "distcpMapBandwidth",
                            _value: "100"
                        }, {
                            _name: "targetCluster",
                            _value: "backupCluster"
                        }, {
                            _name: "sourceCluster",
                            _value: "primaryCluster"
                        }, {
                            _name: "targetHiveServer2Uri",
                            _value: "hive2://240.0.0.11:10000"
                        }, {
                            _name: "sourceHiveServer2Uri",
                            _value: "hive2://240.0.0.10:10000"
                        }, {
                            _name: "sourceStagingPath",
                            _value: "/apps/falcon/primaryCluster/staging"
                        }, {
                            _name: "targetStagingPath",
                            _value: "/apps/falcon/backupCluster/staging"
                        }, {
                            _name: "targetNN",
                            _value: "hdfs://240.0.0.11:8020"
                        }, {
                            _name: "sourceNN",
                            _value: "hdfs://240.0.0.10:8020"
                        }, {
                            _name: "sourceServicePrincipal",
                            _value: "hive"
                        }, {
                            _name: "targetServicePrincipal",
                            _value: "hive"
                        }, {
                            _name: "targetMetastoreUri",
                            _value: "thrift://240.0.0.11:9083"
                        }, {
                            _name: "sourceMetastoreUri",
                            _value: "thrift://240.0.0.10:9083"
                        }, {
                            _name: "sourceTable",
                            _value: ""
                        }, {
                            _name: "sourceDatabase",
                            _value: ""
                        }, {
                            _name: "maxEvents",
                            _value: "-1"
                        }, {
                            _name: "replicationMaxMaps",
                            _value: "5"
                        }, {
                            _name: "clusterForJobRun",
                            _value: "primaryCluster"
                        }, {
                            _name: "clusterForJobRunWriteEP",
                            _value: "hdfs://240.0.0.10:8020"
                        }, {
                            _name: "drJobName",
                            _value: "hive-disaster-recovery-sowmya-1"
                        }, {
                            _name: "drNotificationReceivers",
                            _value: "NA"
                        } ]
                    },
                    workflow: {
                        _name: "falcon-dr-hive-workflow",
                        _engine: "oozie",
                        _path: "/apps/data-mirroring/workflows/hive-disaster-recovery-workflow.xml",
                        _lib: ""
                    },
                    retry: {
                        _policy: "periodic",
                        _delay: "minutes(30)",
                        _attempts: "3"
                    },
                    ACL: {
                        _owner: "hrt_qa",
                        _group: "users",
                        _permission: "0755"
                    },
                    _xmlns: "uri:falcon:process:0.1",
                    _name: "hive-disaster-recovery-sowmya-1"
                }
            }
        }, angular.copy(d.defaultValues.cluster, d.clusterModel), angular.copy(d.defaultValues.MirrorUIModel, d.datasetModel.UIModel), 
        d;
    } ]);
}(), function() {
    "use strict";
    function a(a) {
        return !d[a._name];
    }
    function b(a) {
        return d[a._name];
    }
    var c = angular.module("app.services.entity.serializer", [ "app.services.json.transformer", "app.services", "app.services.entity.factory", "app.services.entity.model" ]);
    c.factory("EntitySerializer", [ "EntityFactory", "JsonTransformerFactory", "X2jsService", "DateHelper", "EntityModel", function(c, d, e, f, g) {
        function h(a) {
            return f.createISO(a.date, a.time, P);
        }
        function i(a) {
            return f.importDate(a, P);
        }
        function j(a) {
            return f.createISOString(a.date, a.time);
        }
        function k(a) {
            return f.importDate(a, Q);
        }
        function l(a) {
            return a.filter(m).map(p).join(",");
        }
        function m(a) {
            return a.key;
        }
        function n(a) {
            return a && a.value;
        }
        function o(a) {
            return a.value.unit ? a.value.quantity : a.value;
        }
        function p(a) {
            return a.key + "=" + a.value;
        }
        function q(a) {
            return a.quantity ? a.unit + "(" + a.quantity + ")" : null;
        }
        function r() {
            return {};
        }
        function g(a) {
            this[a] = {
                _xmlns: "uri:falcon:" + a + ":0.1"
            };
        }
        function s(a, b) {
            function c(a) {
                return a.locations.map(function(a) {
                    return f.apply(a, {});
                });
            }
            function d(a) {
                return {
                    _uri: a.catalogTable.uri
                };
            }
            var e = b.transform("key", "_name").transform("value", "_value", function(a) {
                return a.quantity ? q(a) : a;
            }), f = b.transform("type", "_type").transform("path", "_path"), i = b.transform("name", "_name").transform("type", "_type").transform("validity.start", "validity._start", function() {
                return P = a.timezone, h;
            }()).transform("validity.end", "validity._end", h).transform("retention", "retention._limit", q).transform("retention.action", "retention._action").transform("storage.fileSystem", "locations.location", function(b) {
                return a.storage.fileSystem.active ? c(b) : null;
            }).transform("storage.catalog", "table", function(b) {
                return a.storage.catalog.active ? d(b) : null;
            }), j = b.transform("name", "feed._name").transform("description", "feed._description").transform("tags", "feed.tags", l).transform("groups", "feed.groups").transform("availabilityFlag", "feed.availabilityFlag").transform("frequency", "feed.frequency", q).transform("timezone", "feed.timezone").transform("lateArrival.cutOff", "feed.late-arrival._cut-off", q).transform("clusters", "feed.clusters.cluster", function(a) {
                return a.map(function(a) {
                    return i.apply(a, {});
                });
            }).transform("storage.fileSystem", "feed.locations.location", function(a) {
                return a.active ? c(a) : null;
            }).transform("storage.catalog", "feed.table", function(a) {
                return a.active ? d(a) : null;
            }).transform("ACL", "feed.ACL", r).transform("ACL.owner", "feed.ACL._owner").transform("ACL.group", "feed.ACL._group").transform("ACL.permission", "feed.ACL._permission").transform("schema", "feed.schema", r).transform("schema.location", "feed.schema._location").transform("schema.provider", "feed.schema._provider").transform("allproperties", "feed.properties.property", function(a) {
                return a.filter(n).filter(o).map(function(a) {
                    return e.apply(a, {});
                });
            });
            return j.apply(a, new g("feed"));
        }
        function t(a, b) {
            var c = b.transform("name", "_name").transform("validity.start", "validity._start", function() {
                return Q = a.timezone, j;
            }()).transform("validity.end", "validity._end", j), d = b.transform("name", "_name").transform("feed", "_feed").transform("start", "_start").transform("end", "_end").transform("optional", "_optional"), e = b.transform("name", "_name").transform("feed", "_feed").transform("outputInstance", "_instance"), f = b.transform("name", "process._name").transform("tags", "process.tags", l).transform("clusters", "process.clusters.cluster", function(a) {
                return a.map(function(a) {
                    return c.apply(a, {});
                });
            }).transform("parallel", "process.parallel").transform("order", "process.order").transform("frequency", "process.frequency", q).transform("timezone", "process.timezone").transform("inputs", "process.inputs.input", function(a) {
                return 0 === a.length ? null : a.map(function(a) {
                    return d.apply(a, {});
                });
            }).transform("outputs", "process.outputs.output", function(a) {
                return 0 === a.length ? null : a.map(function(a) {
                    return e.apply(a, {});
                });
            }).transform("workflow.name", "process.workflow._name").transform("workflow.version", "process.workflow._version").transform("workflow.engine", "process.workflow._engine").transform("workflow.path", "process.workflow._path").transform("retry.policy", "process.retry._policy").transform("retry.delay", "process.retry._delay", q).transform("retry.attempts", "process.retry._attempts").transform("ACL", "process.ACL", r).transform("ACL.owner", "process.ACL._owner").transform("ACL.group", "process.ACL._group").transform("ACL.permission", "process.ACL._permission");
            return f.apply(a, new g("process"));
        }
        function u(d, e) {
            var f = c.newFeed();
            f.storage.fileSystem.active = !1;
            var g = e.transform("_name", "name").transform("_type", "type").transform("validity._start", "validity.start.date", function() {
                return P = d.feed.timezone, i;
            }()).transform("validity._start", "validity.start.time", i).transform("validity._end", "validity.end.date", i).transform("validity._end", "validity.end.time", i).transform("retention._limit", "retention", F).transform("retention._action", "retention.action").transform("locations", "storage.fileSystem.active", G).transform("locations.location", "storage.fileSystem.locations", M).transform("table", "storage.catalog.active", G).transform("table._uri", "storage.catalog.catalogTable.uri"), h = e.transform("_name", "name").transform("_description", "description").transform("tags", "tags", E).transform("groups", "groups").transform("ACL._owner", "ACL.owner").transform("ACL._group", "ACL.group").transform("ACL._permission", "ACL.permission").transform("schema._location", "schema.location").transform("schema._provider", "schema.provider").transform("frequency", "frequency", F).transform("late-arrival", "lateArrival.active", G).transform("late-arrival._cut-off", "lateArrival.cutOff", F).transform("availabilityFlag", "availabilityFlag").transform("properties.property", "customProperties", I(a, c.newFeedCustomProperties())).transform("properties.property", "properties", I(b, c.newFeedProperties())).transform("locations", "storage.fileSystem.active", G).transform("locations.location", "storage.fileSystem.locations", M).transform("table", "storage.catalog.active", G).transform("table._uri", "storage.catalog.catalogTable.uri").transform("clusters.cluster", "clusters", w(g)).transform("timezone", "timezone");
            return h.apply(angular.copy(d.feed), f);
        }
        function v(a, b) {
            function d(a) {
                return function(b) {
                    var c = b.map(B(a));
                    return c;
                };
            }
            var e = c.newProcess(), f = b.transform("_name", "name").transform("validity._start", "validity.start.date", function() {
                return Q = a.process.timezone, k;
            }()).transform("validity._start", "validity.start.time", k).transform("validity._end", "validity.end.date", k).transform("validity._end", "validity.end.time", k), g = b.transform("_name", "name").transform("_feed", "feed").transform("_start", "start").transform("_end", "end").transform("_optional", "optional", H), h = b.transform("_name", "name").transform("_feed", "feed").transform("_instance", "outputInstance"), i = b.transform("_name", "name").transform("tags", "tags", E).transform("workflow._name", "workflow.name").transform("workflow._version", "workflow.version").transform("workflow._engine", "workflow.engine").transform("workflow._path", "workflow.path").transform("timezone", "timezone").transform("frequency", "frequency", F).transform("parallel", "parallel").transform("order", "order").transform("retry._policy", "retry.policy").transform("retry._attempts", "retry.attempts").transform("retry._delay", "retry.delay", F).transform("clusters.cluster", "clusters", d(f)).transform("inputs.input", "inputs", x(g)).transform("outputs.output", "outputs", z(h)).transform("ACL._owner", "ACL.owner").transform("ACL._group", "ACL.group").transform("ACL._permission", "ACL.permission");
            return i.apply(angular.copy(a.process), e);
        }
        function w(a) {
            return function(b) {
                var c = b.map(B(a));
                return C(c), c;
            };
        }
        function x(a) {
            return function(b) {
                return b.map(y(a));
            };
        }
        function y(a) {
            return function(b) {
                return a.apply(b, c.newInput());
            };
        }
        function z(a) {
            return function(b) {
                return b.map(A(a));
            };
        }
        function A(a) {
            return function(b) {
                return a.apply(b, c.newOutput());
            };
        }
        function B(a) {
            return function(b) {
                var d = c.newCluster("target", !1);
                return d.storage.fileSystem.active = !1, a.apply(b, d);
            };
        }
        function C(a) {
            for (var b = 0, c = a.length; b < c; b++) if ("source" === a[b].type) return void (a[b].selected = !0);
        }
        function D(a) {
            var b = a.split("=");
            return c.newEntry(b[0], b[1]);
        }
        function E(a) {
            return a.split(",").map(D);
        }
        function F(a) {
            var b = a.split("(");
            return c.newFrequency(b[1].split(")")[0], b[0]);
        }
        function G(a) {
            return !!a;
        }
        function H(a) {
            return JSON.parse(a);
        }
        function I(a, b) {
            return function(c) {
                var d = K(c, a).map(L);
                return J(b, d);
            };
        }
        function J(a, b) {
            var c = angular.copy(a), d = O(c, "key");
            return b.forEach(function(a) {
                d[a.key] ? d[a.key].value = a.value : c.push(a);
            }), c;
        }
        function K(a, b) {
            for (var c = [], d = 0, e = a.length; d < e; d++) b(a[d]) && c.push(a[d]);
            return c;
        }
        function L(a) {
            var b = "timeout" !== a._name ? a._value : F(a._value);
            return c.newEntry(a._name, b);
        }
        function M(a) {
            return a.map(N);
        }
        function N(a) {
            return c.newLocation(a._type, a._path);
        }
        function O(a, b) {
            var c = {};
            return a.forEach(function(a) {
                c[a[b]] = a;
            }), c;
        }
        var P, Q;
        return {
            preSerialize: function(a, b) {
                return "feed" === b ? (a.properties && (a.allproperties = a.properties.concat(a.customProperties)), 
                s(a, d)) : "process" === b ? t(a, d) : void 0;
            },
            serialize: function(a, b) {
                return e.json2xml_str(this.preSerialize(a, b));
            },
            preDeserialize: function(a, b) {
                return "feed" === b ? u(a, d) : "process" === b ? v(a, d) : void 0;
            },
            deserialize: function(a, b) {
                var c = e.xml_str2json(a);
                return this.preDeserialize(c, b);
            }
        };
    } ]);
    var d = {
        queueName: !0,
        jobPriority: !0,
        timeout: !0,
        parallel: !0,
        maxMaps: !0,
        mapBandwidthKB: !0
    };
}(), function() {
    "use strict";
    var a = angular.module("app.services.entity", [ "app.services" ]);
    a.factory("EntityFalcon", [ "Falcon", "$q", function(a, b) {
        var c = {};
        return c.searchEntities = function(d, e, f, g) {
            var h = b.defer();
            return a.logRequest(), a.searchEntities(d, e, f, g).success(function(b) {
                a.logResponse("success", b, !1, !0), b.totalResults = parseInt(b.totalResults), 
                b.entity || (b.entity = []), b.entity.name && (b.entity = [ b.entity ]), b.entity.forEach(function(a) {
                    a.tags && "string" == typeof a.tags.tag && (a.tags.tag = [ a.tags.tag ]), a.clusters && "string" == typeof a.clusters.cluster && (a.clusters.cluster = [ a.clusters.cluster ]);
                }), c.data = b, h.resolve();
            }).error(function(b) {
                a.logResponse("error", b), h.resolve();
            }), h.promise;
        }, c;
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.services.instance", [ "app.services" ]);
    a.factory("InstanceFalcon", [ "Falcon", "$q", function(a, b) {
        var c = {};
        return c.searchInstances = function(d, e, f, g, h, i, j, k) {
            var l = b.defer();
            return a.logRequest(), a.searchInstances(d, e, f, g, h, i, j, k).success(function(b) {
                a.logResponse("success", b, !1, !0), void 0 === b.instances && (b.instances = []), 
                c.data = b, l.resolve();
            }).error(function(b) {
                a.logResponse("error", b), l.resolve();
            }), l.promise;
        }, c;
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.services", [ "app.services.falcon", "app.services.fileapi", "app.services.json.transformer", "app.services.x2js", "app.services.validation", "app.services.entity", "app.services.entity.serializer", "app.services.entity.factory", "app.services.entity.model", "app.services.instance", "app.services.server" ]);
    a.factory("SpinnersFlag", function() {
        return {
            show: !1,
            backShow: !1
        };
    }), a.factory("SpinnersFlag", function() {
        return {
            show: !1,
            backShow: !1
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("chart-module", [ "app.services.falcon" ]);
    a.directive("chart", function() {
        return {
            scope: {
                input: "=",
                t: "@",
                mode: "=",
                details: "="
            },
            restrict: "EA",
            link: function(a, b) {
                function c() {
                    0 !== a.input.length && (a.w = angular.element(".chartCol").width(), a.h = 400, 
                    "daily" === a.mode ? a.xDomain = 14 : a.xDomain = 24, a.yDomain = d3.max(a.input, function(a) {
                        return a.numFailedInstances >= a.numSuccessfullInstances ? a.numFailedInstances : a.numSuccessfullInstances;
                    }), a.yMaxDataSizeDomain = d3.max(a.input, function(a) {
                        return a.dataSizeCopied;
                    }) + 100, a.yMaxDataSizeDomain = 1.2 * a.yMaxDataSizeDomain, a.yDomain = 1.2 * a.yDomain, 
                    d3.selectAll("svg").remove(), d());
                }
                function d() {
                    var c, d, e = d3.scale.linear().domain([ 0, a.xDomain ]).range([ 0, a.w - 2 * a.t ]), f = d3.scale.linear().domain([ 0, a.yDomain ]).range([ 0, a.h - 2 * a.t ]), g = d3.scale.linear().domain([ 0, a.yMaxDataSizeDomain ]).range([ 0, a.h - 2 * a.t ]), h = d3.svg.axis().scale(e).orient("bottom").ticks(a.xDomain), i = 11, j = d3.select(b[0]).append("svg").attr("width", a.w).attr("height", a.h), k = d3.svg.line().x(function(a, b) {
                        return e(b);
                    }).y(function() {
                        return f(a.yDomain);
                    }).interpolate("cardinal"), l = d3.svg.line().x(function(a, b) {
                        return e(b);
                    }).y(function(b) {
                        return f(a.yDomain - b.numSuccessfullInstances);
                    }).interpolate("cardinal"), m = d3.svg.line().x(function(a, b) {
                        return e(b);
                    }).y(function(b) {
                        return f(a.yDomain - b.numFailedInstances);
                    }).interpolate("cardinal"), n = d3.svg.area().x(function(a, b) {
                        return e(b);
                    }).y0(f(a.yDomain)).y1(function(b) {
                        return f(a.yDomain - b.numSuccessfullInstances);
                    }).interpolate("cardinal"), o = d3.svg.area().x(function(a, b) {
                        return e(b);
                    }).y0(f(a.yDomain)).y1(function(b) {
                        return f(a.yDomain - b.numFailedInstances);
                    }).interpolate("cardinal");
                    j.append("g").attr("class", "x axis").attr("transform", "translate(" + a.t + "," + (a.h - a.t + .5) + ")").call(h), 
                    "daily" === a.mode && j.selectAll("g.dateAxis").data(a.input).enter().append("g").attr("class", "dateAxis").append("text").attr({
                        "text-anchor": "middle",
                        x: function(a, b) {
                            return e(b);
                        },
                        y: function() {
                            return f(a.yDomain);
                        },
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + 1.5 * a.t + ")"
                    }).html(function(a) {
                        var b = d3.time.format.utc("%d %b");
                        return b(new Date(a.startTime));
                    }), d3.range(0, i + 1).forEach(function(b) {
                        j.append("svg:line").attr({
                            stroke: "#d3d3d3",
                            "stroke-width": 1,
                            x1: 0,
                            x2: e(a.xDomain),
                            y1: f(a.yDomain / i * b),
                            y2: f(a.yDomain / i * b),
                            transform: "translate(" + a.t + "," + a.t + ")"
                        });
                    }), j.selectAll("rect.dataSize").data(a.input).enter().append("svg:rect").attr("class", "dataSize").attr({
                        x: function(a, b) {
                            return e(b);
                        },
                        y: function() {
                            return g(a.yMaxDataSizeDomain);
                        },
                        width: function() {
                            return e(1);
                        },
                        height: function() {
                            return 0;
                        },
                        stroke: "none",
                        fill: "rgba(8,8,8,0.3)",
                        transform: "translate(" + a.t + "," + a.t + ")"
                    }).transition().duration(2e3).attr({
                        height: function(a) {
                            return g(a.dataSizeCopied);
                        },
                        y: function(b) {
                            return g(a.yMaxDataSizeDomain - b.dataSizeCopied);
                        }
                    }), j.append("svg:path").attr({
                        d: k(a.input),
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")",
                        stroke: "green",
                        "stroke-width": 2,
                        "stroke-linecap": "round",
                        fill: "rgba(0,0,0,0)"
                    }).transition().duration(1e3).attr({
                        d: l(a.input)
                    }), j.append("svg:path").attr({
                        d: k(a.input),
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")",
                        stroke: "red",
                        "stroke-width": 2,
                        fill: "none"
                    }).transition().duration(1e3).delay(500).attr({
                        d: m(a.input)
                    }), j.append("svg:path").attr({
                        d: k(a.input),
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")"
                    }).transition().duration(1e3).attr({
                        d: n(a.input),
                        stroke: "none",
                        fill: "rgba(0,255,0,0.1)"
                    }), j.append("svg:path").attr({
                        d: k(a.input),
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")"
                    }).transition().duration(1e3).delay(500).attr({
                        d: o(a.input),
                        stroke: "none",
                        fill: "rgba(255,0,0,0.1)"
                    }), c = j.selectAll("g.col").data(a.input).enter().append("g").attr("class", "column"), 
                    c.append("svg:line").attr({
                        stroke: "#d3d3d3",
                        "stroke-width": 1,
                        x1: function(a, b) {
                            return e(b);
                        },
                        x2: function(a, b) {
                            return e(b);
                        },
                        y1: 0,
                        y2: f(a.yDomain),
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")"
                    }), c.append("svg:line").attr({
                        stroke: "#748484",
                        "stroke-width": 3,
                        x1: function(a, b) {
                            return e(b);
                        },
                        x2: function(a, b) {
                            return e(b + 1);
                        },
                        y1: function(b) {
                            return g(a.yMaxDataSizeDomain - b.dataSizeCopied) + 1.5;
                        },
                        y2: function(b) {
                            return g(a.yMaxDataSizeDomain - b.dataSizeCopied) + 1.5;
                        },
                        transform: "translate(" + a.t + "," + a.t + ")"
                    }), c.append("circle").attr({
                        r: 5,
                        fill: "green",
                        cx: function(a, b) {
                            return e(b);
                        },
                        cy: function(b) {
                            return f(a.yDomain - b.numSuccessfullInstances);
                        },
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")"
                    }), c.append("circle").attr({
                        r: 5,
                        fill: "red",
                        cx: function(a, b) {
                            return e(b);
                        },
                        cy: function(b) {
                            return f(a.yDomain - b.numFailedInstances);
                        },
                        transform: "translate(" + (e(.5) + parseInt(a.t, 10)) + "," + a.t + ")"
                    }), d = c.append("g").attr("transform", "translate(" + a.t + ", -" + a.t / 2 + ")"), 
                    d.append("svg:rect").attr({
                        stroke: "gray",
                        fill: "white",
                        transform: "translate(-6, -" + a.t + ")",
                        width: 50,
                        height: 50,
                        "stroke-width": 1,
                        x: function(a, b) {
                            return e(b);
                        },
                        y: function(b) {
                            return f(b.numSuccessfullInstances) > g(b.dataSizeCopied) && f(b.numSuccessfullInstances) > f(b.numFailedInstances) ? f(a.yDomain) - f(b.numSuccessfullInstances) : f(b.numFailedInstances) > g(b.dataSizeCopied) && f(b.numFailedInstances) > f(b.numSuccessfullInstances) ? f(a.yDomain) - f(b.numFailedInstances) : g(a.yMaxDataSizeDomain) - g(b.dataSizeCopied);
                        }
                    }), d.append("text").attr({
                        x: function(a, b) {
                            return e(b);
                        },
                        y: function(b) {
                            return f(b.numSuccessfullInstances) > g(b.dataSizeCopied) && f(b.numSuccessfullInstances) > f(b.numFailedInstances) ? f(a.yDomain) - f(b.numSuccessfullInstances) : f(b.numFailedInstances) > g(b.dataSizeCopied) && f(b.numFailedInstances) > f(b.numSuccessfullInstances) ? f(a.yDomain) - f(b.numFailedInstances) : g(a.yMaxDataSizeDomain) - g(b.dataSizeCopied);
                        },
                        transform: "translate(10, -" + .5 * a.t + ")",
                        position: "relative"
                    }).html(function(a) {
                        var b = "<tspan x='' y='' fill='green'>" + a.numSuccessfullInstances + "</tspan>";
                        return b;
                    }), d.append("text").attr({
                        x: function(a, b) {
                            return e(b);
                        },
                        y: function(b) {
                            return f(b.numSuccessfullInstances) > g(b.dataSizeCopied) && f(b.numSuccessfullInstances) > f(b.numFailedInstances) ? f(a.yDomain) - f(b.numSuccessfullInstances) : f(b.numFailedInstances) > g(b.dataSizeCopied) && f(b.numFailedInstances) > f(b.numSuccessfullInstances) ? f(a.yDomain) - f(b.numFailedInstances) : g(a.yMaxDataSizeDomain) - g(b.dataSizeCopied);
                        },
                        transform: "translate(10, -2)",
                        position: "relative"
                    }).html(function(a) {
                        var b = "<tspan x='' y='' fill='red'>" + a.numFailedInstances + "</tspan>";
                        return b;
                    }), d.append("text").attr({
                        x: function(a, b) {
                            return e(b);
                        },
                        y: function(b) {
                            return f(b.numSuccessfullInstances) > g(b.dataSizeCopied) && f(b.numSuccessfullInstances) > f(b.numFailedInstances) ? f(a.yDomain) - f(b.numSuccessfullInstances) : f(b.numFailedInstances) > g(b.dataSizeCopied) && f(b.numFailedInstances) > f(b.numSuccessfullInstances) ? f(a.yDomain) - f(b.numFailedInstances) : g(a.yMaxDataSizeDomain) - g(b.dataSizeCopied);
                        },
                        transform: "translate(0, 13)",
                        position: "relative"
                    }).html(function(a) {
                        return "<tspan x='' y='' fill='gray'>" + a.dataSizeCopied + "</tspan>";
                    }), d.append("circle").attr({
                        r: 5,
                        fill: "green",
                        cx: function(a, b) {
                            return e(b);
                        },
                        cy: function(b) {
                            return f(b.numSuccessfullInstances) > g(b.dataSizeCopied) && f(b.numSuccessfullInstances) > f(b.numFailedInstances) ? f(a.yDomain) - f(b.numSuccessfullInstances) : f(b.numFailedInstances) > g(b.dataSizeCopied) && f(b.numFailedInstances) > f(b.numSuccessfullInstances) ? f(a.yDomain) - f(b.numFailedInstances) : g(a.yMaxDataSizeDomain) - g(b.dataSizeCopied);
                        },
                        transform: "translate(3,-20)"
                    }), d.append("circle").attr({
                        r: 5,
                        fill: "red",
                        cx: function(a, b) {
                            return e(b);
                        },
                        cy: function(b) {
                            return f(b.numSuccessfullInstances) > g(b.dataSizeCopied) && f(b.numSuccessfullInstances) > f(b.numFailedInstances) ? f(a.yDomain) - f(b.numSuccessfullInstances) : f(b.numFailedInstances) > g(b.dataSizeCopied) && f(b.numFailedInstances) > f(b.numSuccessfullInstances) ? f(a.yDomain) - f(b.numFailedInstances) : g(a.yMaxDataSizeDomain) - g(b.dataSizeCopied);
                        },
                        transform: "translate(3,-6)"
                    }), c.append("rect").attr({
                        x: function(a, b) {
                            return e(b);
                        },
                        y: 0,
                        width: function() {
                            return e(1);
                        },
                        height: a.h,
                        stroke: "none",
                        fill: "transparent",
                        transform: "translate(" + a.t + ", 0)"
                    }).on("click", function(b) {
                        a.details(b);
                    });
                }
                a.$watch(function() {
                    return a.input;
                }, function() {
                    c();
                }), angular.element(window).on("resize", c), c();
            }
        };
    }), a.controller("chartCtrl", [ "$scope", "Falcon", function(a, b) {
        var c = d3.time.format.utc("%A %d"), d = d3.time.format.utc("%b %Y"), e = d3.time.format.utc("%H:%M");
        a.graphData = [], a.chartOptions = {
            entity: "feed",
            mode: "hourly",
            day: ""
        }, a.chartSidebarDate = {}, a.requestNewData = function() {
            var c = a.chartOptions.entity, d = a.chartOptions.mode, e = new Date(a.chartOptions.day), f = [ "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" ], g = e.getFullYear() + "-" + f[e.getMonth()] + "-" + function() {
                var a = e.getDate();
                return a < 10 ? "0" + a : a;
            }(), h = g;
            c && d && "" !== a.chartOptions.day && void 0 !== a.chartOptions.day && b.getInstancesSummary(c, d, g, h).success(function(b) {
                a.graphData = b.summary;
            }).error(function(a) {
                b.logResponse("error", a, !1);
            }), a.chartSidebarDate = {}, a.chartSidebarModel = void 0;
        }, a.dateFormat = "MM/dd/yyyy", a.openDatePicker = function(b) {
            b.preventDefault(), b.stopPropagation(), a.opened = !0;
        }, a.details = function(f) {
            var g = f.startTime, h = f.endTime, i = a.chartOptions.entity;
            a.chartSidebarDate.firstLeg = c(new Date(g)), a.chartSidebarDate.secondLeg = d(new Date(g)), 
            a.chartSidebarDate.timeLeg = e(new Date(g)), b.getTopEntities(i, g, h).success(function(b) {
                a.chartSidebarModel = b;
            }).error(function(a) {
                b.logResponse("error", a, !1);
            });
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.check-name", [ "app.services.falcon", "app.services.validation" ]);
    a.directive("checkName", [ "ValidationService", "$timeout", "Falcon", "EntityFalcon", function(a, b, c, d) {
        return {
            replace: !1,
            scope: {
                checkName: "="
            },
            restrict: "A",
            link: function(d, e) {
                function f() {
                    e.parent().append("<div class='nameInputDisplay hidden'></div><label class='custom-danger nameValidationMessage'></label>");
                }
                function g(b) {
                    m = e[0].value, 0 === m.length ? angular.element(".nameInputDisplay").addClass("hidden") : (c.logRequest(), 
                    c.getEntityDefinition(l, m).success(function(d) {
                        c.logResponse("success", d, !1, !0), a.nameAvailable = !1, 0 === m.length ? angular.element(".nameInputDisplay").addClass("hidden") : !a.nameAvailable && m.length > 0 && e.hasClass("ng-valid") ? angular.element(".nameInputDisplay").html("Name unavailable").removeClass("custom-success hidden").addClass("custom-danger") : a.nameAvailable && m.length > 0 && e.hasClass("ng-valid") ? angular.element(".nameInputDisplay").html("Name available").removeClass("custom-danger hidden").addClass("custom-success") : e.hasClass("ng-invalid-pattern") && m.length > 0 && angular.element(".nameInputDisplay").addClass("hidden"), 
                        b && b();
                    }).error(function(d) {
                        c.logResponse("error", d, !1, !0), a.nameAvailable = !0, 0 === m.length ? angular.element(".nameInputDisplay").addClass("hidden") : !a.nameAvailable && m.length > 0 && e.hasClass("ng-valid") ? angular.element(".nameInputDisplay").html("Name unavailable").removeClass("custom-success hidden").addClass("custom-danger") : a.nameAvailable && m.length > 0 && e.hasClass("ng-valid") ? angular.element(".nameInputDisplay").html("Name available").removeClass("custom-danger hidden").addClass("custom-success") : e.hasClass("ng-invalid-pattern") && m.length > 0 && angular.element(".nameInputDisplay").addClass("hidden"), 
                        b && b();
                    }));
                }
                function h() {
                    0 === m.length ? (e.addClass("empty"), angular.element(".nameValidationMessage").html(a.messages.name.empty).addClass("hidden")) : !a.nameAvailable && m.length > 0 && e.hasClass("ng-valid") ? (e.addClass("empty"), 
                    angular.element(".nameValidationMessage").html(a.messages.name.unavailable).addClass("hidden")) : e.hasClass("ng-invalid-pattern") && m.length > 0 ? (e.removeClass("empty"), 
                    e.parent().addClass("showValidationStyle"), angular.element(".nameValidationMessage").html(a.messages.name.patternInvalid).removeClass("hidden")) : e.hasClass("ng-valid") && m.length > 0 && (e.parent().removeClass("showValidationStyle"), 
                    angular.element(".nameValidationMessage").addClass("hidden"));
                }
                function i() {
                    e.bind("keyup", function() {
                        g(), h();
                    }), e.bind("focus", function() {
                        e.removeClass("empty");
                    }), e.bind("blur", function() {
                        e.hasClass("ng-valid") && a.nameAvailable ? angular.element(".nameValidationMessage").addClass("hidden") : (e.parent().addClass("showValidationStyle"), 
                        angular.element(".nameValidationMessage").removeClass("hidden"), e.removeClass("empty"));
                    });
                }
                function j() {
                    f(), i(), g(), h(), b(function() {
                        e.trigger("focus");
                    }, 20);
                }
                var k = d.checkName, l = k.type, m = e[0].value;
                k.check && (d.$watch(function() {
                    return e[0].value;
                }, function() {
                    d.$parent.editXmlDisabled || (0 === e[0].value.length && e.addClass("empty"), g(function() {
                        h(), e.hasClass("ng-valid") && a.nameAvailable ? angular.element(".nameValidationMessage").addClass("hidden") : (e.parent().addClass("showValidationStyle"), 
                        angular.element(".nameValidationMessage").removeClass("hidden"), e.removeClass("empty"));
                    }));
                }), j());
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.dependencies-graph", [ "app.services" ]);
    a.controller("DependenciesGraphCtrl", [ "$scope", "Falcon", "X2jsService", "$window", "EncodeService", "EntityModel", function(a, b, c, d, e, f) {} ]), 
    a.directive("dependenciesGraph", [ "$timeout", "Falcon", "$filter", "$state", "X2jsService", "EntityModel", function(a, b, c, d, e, f) {
        return {
            scope: {
                type: "=",
                name: "="
            },
            controller: "DependenciesGraphCtrl",
            restrict: "EA",
            templateUrl: "html/directives/dependenciesGraphDv.html",
            link: function(a, c) {
                var g = function(a, c, d) {
                    function e(a, b) {
                        return a + "/" + b;
                    }
                    function f(a, b) {
                        var c = e(a, b);
                        if (void 0 !== i[c]) return i[c];
                        var d = {
                            id: j++,
                            type: a,
                            name: b,
                            dependency: []
                        };
                        return i[c] = d, d;
                    }
                    function g(a) {
                        var c = a.type, g = a.name;
                        e(c, g);
                        b.logRequest(), b.getEntityDependencies(c, g).success(function(c) {
                            if (b.logResponse("success", c, !1, !0), null != c.entity) {
                                $.isArray(c.entity) || (c.entity = new Array(c.entity));
                                for (var e = c.entity.length, g = 0; g < e; ++g) {
                                    var h = c.entity[g], j = f(h.type, h.name), k = null, l = null;
                                    "cluster" === j.type ? (k = a, l = j) : "process" === j.type ? (k = j, l = a) : "cluster" === a.type ? (k = j, 
                                    l = a) : (k = a, l = j), k.dependency.push(l.id);
                                }
                                d(i);
                            }
                        }).error(function(a) {
                            b.logResponse("error", a, !1, !0);
                        });
                    }
                    function h() {
                        var b = f(a, c);
                        g(b);
                    }
                    var i = {}, j = 0;
                    h();
                }, h = function(a, c) {
                    function g(a, b) {
                        var c = a.x, d = a.y, e = b.x - c, f = b.y - d, g = a.width / 2, h = a.height / 2;
                        if (0 == e) return {
                            x: b.x,
                            y: a.y + (f > 0 ? h : -h)
                        };
                        var i = f / e, j = null, k = null;
                        return Math.abs(i) < a.height / a.width ? (j = a.x + (e > 0 ? g : -g), k = d + i * (j - c)) : (k = a.y + (f > 0 ? h : -h), 
                        j = c + (k - d) / i), {
                            x: j,
                            y: k
                        };
                    }
                    function h(a, c) {
                        var g = q.append("g").classed("node", !0).attr("transform", "translate(" + -c.width / 2 + "," + -c.height / 2 + ")"), h = s[a], i = g.append("foreignObject").attr("x", c.x).attr("y", c.y).attr("width", c.width).attr("height", c.height).attr("class", "foreignObject");
                        i.append("xhtml:div").text(h.name).classed("node-name", !0).classed("node-name-" + h.type, !0), 
                        g.append("rect").attr("width", c.width).attr("height", c.height).attr("x", c.x).attr("y", c.y).attr("rx", n).attr("ry", n).on("click", function() {
                            b.logRequest(), b.getEntityDefinition(h.type.toLowerCase(), h.name).success(function(a) {
                                b.logResponse("success", a, !1, !0);
                                var c = e.xml_str2json(a);
                                f.type = h.type.toLowerCase(), f.name = h.name, f.model = c, d.go("entityDetails");
                            }).error(function(a) {
                                b.logResponse("error", a, !1, !1);
                            });
                        });
                    }
                    function i(a, b, c, d) {
                        var e = q.append("g").classed("edge", !0);
                        e.append("path").attr("marker-end", "url(#arrowhead)").attr("d", function() {
                            var a = d.points, e = t.node(b), f = t.node(c), h = 0 === a.length ? f : a[0], i = 0 === a.length ? e : a[a.length - 1];
                            return a.unshift(g(e, h)), a.push(g(f, i)), r(a);
                        });
                    }
                    function j() {
                        q.append("svg:defs").append("svg:marker").attr("id", "arrowhead").attr("viewBox", "0 0 10 10").attr("refX", 8).attr("refY", 5).attr("markerUnits", "strokewidth").attr("markerWidth", 8).attr("markerHeight", 5).attr("orient", "auto").attr("style", "fill: #333").append("svg:path").attr("d", "M 0 0 L 10 5 L 0 10 z");
                    }
                    function k() {
                        var b = new dagre.Digraph();
                        for (var c in a) {
                            var d = a[c];
                            s[d.id] = d, b.addNode(d.id, {
                                width: l,
                                height: m
                            });
                        }
                        for (var c in a) for (var d = a[c], e = 0, f = d.dependency.length; e < f; ++e) {
                            var g = d.dependency[e];
                            b.addEdge(null, d.id, g);
                        }
                        t = dagre.layout().universalSep(p).rankSep(o).run(b), t.eachEdge(i), t.eachNode(h);
                        var k = t.graph();
                        q.attr("width", k.width + 150), q.attr("height", k.height + 10), j();
                    }
                    var l = 150, m = 50, n = 10, o = 40, p = 80, q = d3.select(c).append("svg"), r = d3.svg.line().x(function(a) {
                        return a.x;
                    }).y(function(a) {
                        return a.y;
                    }).interpolate("basis"), s = {}, t = null;
                    k();
                }, i = function(a, b) {
                    g(a, b, function(a) {
                        h(a, c[0]);
                    });
                };
                i(a.type, a.name);
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives", [ "app.services", "app.directives.entities-search-list", "app.directives.instances-list", "app.directives.server-messages", "app.directives.entity", "app.directives.check-name", "app.directives.validation-message", "chart-module", "app.directives.dependencies-graph", "app.directives.lineage-graph" ]);
    a.directive("errorNav", function() {
        return {
            replace: !1,
            restrict: "A",
            templateUrl: "html/error.html"
        };
    }), a.directive("navHeader", function() {
        return {
            replace: !1,
            restrict: "A",
            templateUrl: "html/directives/navDv.html",
            controller: "HeaderController"
        };
    }), a.directive("fileinputChange", function() {
        return {
            restrict: "A",
            link: function(a, b, c) {
                var d = b.scope()[c.fileinputChange];
                b.bind("change", d), b.bind("click", function() {
                    this.value = "";
                });
            }
        };
    }), a.factory("EncodeService", function() {
        return {
            encode: function(a) {
                return encodeURIComponent(a);
            }
        };
    }), a.directive("frequency", function() {
        return {
            replace: !1,
            scope: {
                value: "=",
                prefix: "@"
            },
            restrict: "E",
            template: "{{output}}",
            link: function(a) {
                a.value.quantity ? a.output = a.prefix + " " + a.value.quantity + " " + a.value.unit : a.output = "Not specified";
            }
        };
    }), a.directive("timeZoneSelect", function() {
        return {
            restrict: "E",
            replace: !1,
            scope: {
                ngModel: "="
            },
            templateUrl: "html/directives/timeZoneSelectDv.html"
        };
    }), a.directive("simpleDate", [ "$filter", function(a) {
        return {
            require: "ngModel",
            link: function(b, c, d, e) {
                e.$parsers.push(function(a) {
                    return a;
                }), e.$formatters.push(function(b) {
                    return "" !== b && (b = a("date")(b, "MM/dd/yyyy")), b;
                });
            }
        };
    } ]), a.directive("ngEnter", function() {
        return function(a, b, c) {
            b.bind("keydown keypress", function(b) {
                13 === b.which && (a.$apply(function() {
                    a.$eval(c.ngEnter);
                }), b.preventDefault());
            });
        };
    }), a.directive("elastic", [ "$timeout", function(a) {
        return {
            restrict: "A",
            link: function(b, c) {
                b.$watch(function() {
                    return c[0].value;
                }, function() {
                    d();
                });
                var d = function() {
                    return c[0].style.height = "250px", c[0].style.height = "" + c[0].scrollHeight + "px";
                };
                a(d, 0);
            }
        };
    } ]), a.directive("autofocus", [ "$timeout", function(a) {
        return {
            restrict: "A",
            link: function(b, c) {
                a(function() {
                    c.trigger("focus");
                }, 20);
            }
        };
    } ]), a.filter("dateFormatter", function() {
        return function(a) {
            console.log(a);
            var b = a.split("T")[0], c = a.split("T")[1].split("Z")[0].split(".")[0];
            return b + " " + c;
        };
    }), a.directive("onBlur", [ function() {
        return {
            restrict: "A",
            link: function(a, b, c) {
                b.bind("blur", function() {
                    return !!c.onBlur && void a[c.onBlur]();
                });
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.entities-list", [ "app.services" ]);
    a.controller("EntitiesListCtrl", [ "$scope", "Falcon", "X2jsService", "$window", "EncodeService", function(a, b, c, d, e) {
        a.downloadEntity = function(a, c) {
            b.logRequest(), b.getEntityDefinition(a, c).success(function(a) {
                b.logResponse("success", a, !1, !0), d.location.href = "data:application/octet-stream," + e.encode(a);
            }).error(function(a) {
                b.logResponse("error", a, !1);
            });
        };
    } ]), a.filter("tagFilter", function() {
        return function(a) {
            var b, c = [];
            for (b = 0; b < a.length; b++) {
                var d = a[b];
                d.list && d.list.tag || (d.list = {
                    tag: [ "" ]
                }), c.push(d);
            }
            return c;
        };
    }), a.directive("entitiesList", [ "$timeout", "Falcon", function(a, b) {
        return {
            scope: {
                input: "=",
                schedule: "=",
                suspend: "=",
                clone: "=",
                remove: "=",
                edit: "=",
                type: "@",
                entityDetails: "=",
                resume: "=",
                refresh: "="
            },
            controller: "EntitiesListCtrl",
            restrict: "EA",
            templateUrl: "html/directives/entitiesListDv.html",
            link: function(c) {
                c.server = b, c.$watch("input", function() {
                    c.selectedRows = [], c.checkButtonsToShow();
                }, !0), c.selectedRows = [], c.checkedRow = function(a) {
                    var b = !1;
                    return c.selectedRows.forEach(function(c) {
                        a === c.name && (b = !0);
                    }), b;
                }, c.simpleFilter = {}, c.selectedDisabledButtons = {
                    schedule: !0,
                    suspend: !0,
                    resume: !0
                }, c.checkButtonsToShow = function() {
                    var b = {
                        SUBMITTED: 0,
                        RUNNING: 0,
                        SUSPENDED: 0,
                        UNKNOWN: 0
                    };
                    a(function() {
                        c.selectedRows.forEach(function(a) {
                            b[a.status] = b[a.status] + 1;
                        }), b.SUBMITTED > 0 && (b.RUNNING > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !1,
                            suspend: !0,
                            resume: !0
                        }), b.RUNNING > 0 && (b.SUBMITTED > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !1,
                            resume: !0
                        }), b.SUSPENDED > 0 && (b.SUBMITTED > 0 || b.RUNNING > 0 || b.UNKNOWN > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !1
                        }), b.UNKNOWN > 0 && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        }), 0 === c.selectedRows.length && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        });
                    }, 50);
                }, c.scopeEdit = function() {
                    c.edit(c.selectedRows[0].type, c.selectedRows[0].name);
                }, c.scopeClone = function() {
                    c.clone(c.selectedRows[0].type, c.selectedRows[0].name);
                }, c.goEntityDetails = function(a, b) {
                    c.entityDetails(a, b);
                }, c.scopeRemove = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.remove(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeSchedule = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.schedule(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeSuspend = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.suspend(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeResume = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.resume(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.download = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) c.downloadEntity(c.selectedRows[a].type, c.selectedRows[a].name);
                };
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.entities-search-list", [ "app.services" ]);
    a.controller("EntitiesSearchListCtrl", [ "$scope", "Falcon", "X2jsService", "$window", "EncodeService", function(a, b, c, d, e) {
        a.downloadEntity = function(a, c) {
            b.logRequest(), b.getEntityDefinition(a, c).success(function(a) {
                b.logResponse("success", a, !1, !0), d.location.href = "data:application/octet-stream," + e.encode(a);
            }).error(function(a) {
                b.logResponse("error", a, !1);
            });
        };
    } ]), a.filter("tagFilter", function() {
        return function(a) {
            var b, c = [];
            for (b = 0; b < a.length; b++) {
                var d = a[b];
                d.list && d.list.tag || (d.list = {
                    tag: [ "" ]
                }), c.push(d);
            }
            return c;
        };
    }), a.directive("entitiesSearchList", [ "$timeout", "Falcon", function(a, b) {
        return {
            scope: {
                input: "=",
                schedule: "=",
                suspend: "=",
                clone: "=",
                remove: "=",
                edit: "=",
                type: "@",
                tags: "=",
                focusSearch: "=",
                entityDetails: "=",
                entityDefinition: "=",
                resume: "=",
                refresh: "=",
                pages: "=",
                goPage: "="
            },
            controller: "EntitiesSearchListCtrl",
            restrict: "EA",
            templateUrl: "html/directives/entitiesSearchListDv.html",
            link: function(c) {
                c.server = b, c.$watch("input", function() {
                    c.selectedRows = [], c.checkButtonsToShow();
                }, !0), c.selectedRows = [], c.mirrorTag = "_falcon_mirroring_type", c.checkedRow = function(a) {
                    var b = !1;
                    return c.selectedRows.forEach(function(c) {
                        a === c.name && (b = !0);
                    }), b;
                };
                var d = !0;
                c.toggleSortOrder = function() {
                    b.orderBy.enable = !0, d ? b.orderBy.name = "asc" : b.orderBy.name = "desc", d = !d, 
                    c.$parent.refreshList(c.$parent.tags);
                }, c.simpleFilter = {}, c.selectedDisabledButtons = {
                    schedule: !0,
                    suspend: !0,
                    resume: !0
                }, c.checkButtonsToShow = function() {
                    var b = {
                        SUBMITTED: 0,
                        RUNNING: 0,
                        SUSPENDED: 0,
                        UNKNOWN: 0
                    };
                    a(function() {
                        c.selectedRows.length === c.input.length ? c.selectedAll = !0 : c.selectedAll = !1, 
                        c.selectedRows.forEach(function(a) {
                            b[a.status] = b[a.status] + 1;
                        }), b.SUBMITTED > 0 && (b.RUNNING > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !1,
                            suspend: !0,
                            resume: !0
                        }), b.RUNNING > 0 && (b.SUBMITTED > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !1,
                            resume: !0
                        }), b.SUSPENDED > 0 && (b.SUBMITTED > 0 || b.RUNNING > 0 || b.UNKNOWN > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !1
                        }), b.UNKNOWN > 0 && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        }), 0 === c.selectedRows.length && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0
                        });
                    }, 50);
                };
                var e = function(a) {
                    var b = !1;
                    return c.selectedRows.forEach(function(c) {
                        angular.equals(a, c) && (b = !0);
                    }), b;
                };
                c.checkAll = function() {
                    c.selectedRows.length === c.input.length ? angular.forEach(c.input, function(a) {
                        c.selectedRows.pop();
                    }) : angular.forEach(c.input, function(a) {
                        var b = {
                            name: a.name,
                            type: a.type,
                            status: a.status
                        };
                        e(b) || c.selectedRows.push(b);
                    });
                }, c.addTag = function(a) {
                    var b = !1;
                    if (angular.forEach(c.tags, function(c) {
                        c.text === a && (b = !0);
                    }), !b) {
                        var d = {
                            text: "Tag:" + a
                        };
                        c.tags.push(d), c.focusSearch();
                    }
                }, c.scopeEdit = function() {
                    c.edit(c.selectedRows[0].type, c.selectedRows[0].name);
                }, c.scopeClone = function() {
                    c.clone(c.selectedRows[0].type, c.selectedRows[0].name);
                }, c.goEntityDefinition = function(a, b) {
                    c.entityDefinition(a, b);
                }, c.goEntityDetails = function(a, b) {
                    c.entityDetails(a, b);
                }, c.scopeRemove = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.remove(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeSchedule = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.schedule(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeSuspend = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.suspend(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.scopeResume = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1, c.resume(c.selectedRows[a].type, c.selectedRows[a].name);
                    }
                }, c.download = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) c.downloadEntity(c.selectedRows[a].type, c.selectedRows[a].name);
                }, c.scopeGoPage = function(a) {
                    c.goPage(a);
                }, c.isMirror = function(a) {
                    var b = !1;
                    return void 0 !== a && a.forEach(function(a) {
                        a.indexOf(c.mirrorTag) !== -1 && (b = !0);
                    }), b;
                }, c.displayIcon = function(a, b) {
                    return "FEED" === a ? "entypo download" : "PROCESS" === a && c.isMirror(b) ? "glyphicon glyphicon-duplicate" : "entypo cycle";
                }, c.displayType = function(a) {
                    var b = a.split("=");
                    return "_falcon_mirroring_type" === b[0] ? b[1] : "";
                };
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.entity", []);
    a.directive("entitySummary", function() {
        return {
            restrict: "E",
            controller: "EntitySummaryCtrl",
            link: function(a) {
                a.calculateAmount(), a.$watch("entities", function() {
                    a.calculateAmount();
                }, !0);
            },
            scope: {
                entities: "=",
                type: "@"
            },
            templateUrl: "html/directives/entitySummaryDv.html"
        };
    }), a.controller("EntitySummaryCtrl", [ "$scope", function(a) {
        a.calculateAmount = function() {
            a.statusCount = {
                SUBMITTED: 0,
                RUNNING: 0,
                SUSPENDED: 0,
                UNKNOWN: 0,
                TOTAL_AMOUNT: a.entities.length || 0
            }, a.entities.length > 0 && a.entities.forEach(function(b) {
                void 0 !== b.status && (a.statusCount[b.status] || (a.statusCount[b.status] = 0), 
                a.statusCount[b.status] = a.statusCount[b.status] + 1);
            });
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.instances-list", [ "app.services" ]);
    a.controller("InstancesListCtrl", [ "$scope", "Falcon", "X2jsService", "$window", "EncodeService", function(a, b, c, d, e) {
        a.downloadEntity = function(a) {
            d.location.href = a;
        };
    } ]), a.filter("tagFilter", function() {
        return function(a) {
            var b, c = [];
            for (b = 0; b < a.length; b++) {
                var d = a[b];
                d.list && d.list.tag || (d.list = {
                    tag: [ "" ]
                }), c.push(d);
            }
            return c;
        };
    }), a.directive("instancesList", [ "$timeout", "Falcon", "$filter", function(a, b, c) {
        return {
            scope: {
                input: "=",
                type: "=",
                name: "=",
                start: "=",
                end: "=",
                instanceDetails: "=",
                refresh: "=",
                pages: "=",
                nextPages: "=",
                prevPages: "=",
                goPage: "=",
                changePagesSet: "="
            },
            controller: "InstancesListCtrl",
            restrict: "EA",
            templateUrl: "html/directives/instancesListDv.html",
            link: function(c) {
                c.server = b, c.$watch(function() {
                    return c.input;
                }, function() {
                    c.selectedRows = [], c.checkButtonsToShow();
                }, !0);
                var d = 10, e = 3;
                c.selectedRows = [], c.$parent.refreshInstanceList(c.type, c.name, c.start, c.end), 
                c.startSortOrder = "desc", c.endSortOrder = "desc", c.statusSortOrder = "desc", 
                c.checkedRow = function(a) {
                    var b = !1;
                    return c.selectedRows.forEach(function(c) {
                        a === c.instance && (b = !0);
                    }), b;
                }, c.simpleFilter = {}, c.selectedDisabledButtons = {
                    schedule: !0,
                    suspend: !0,
                    resume: !0,
                    stop: !0
                }, c.checkButtonsToShow = function() {
                    var b = {
                        SUBMITTED: 0,
                        RUNNING: 0,
                        SUSPENDED: 0,
                        UNKNOWN: 0,
                        KILLED: 0,
                        WAITING: 0,
                        FAILED: 0,
                        SUCCEEDED: 0
                    };
                    a(function() {
                        c.selectedRows.length === c.input.length ? c.selectedAll = !0 : c.selectedAll = !1, 
                        c.selectedRows.forEach(function(a) {
                            b[a.status] = b[a.status] + 1;
                        }), b.SUBMITTED > 0 && (b.RUNNING > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 || b.KILLED > 0 || b.WAITING > 0 || b.FAILED > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !1,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        }), b.RUNNING > 0 && (b.SUBMITTED > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 || b.KILLED > 0 || b.WAITING > 0 || b.FAILED > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !1,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !1,
                            resume: !0,
                            stop: !1,
                            rerun: !0
                        }), b.SUSPENDED > 0 && (b.SUBMITTED > 0 || b.RUNNING > 0 || b.UNKNOWN > 0 || b.KILLED > 0 || b.WAITING > 0 || b.FAILED > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !1,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !1,
                            stop: !1,
                            rerun: !0
                        }), b.KILLED > 0 && (b.SUBMITTED > 0 || b.SUSPENDED > 0 || b.RUNNING > 0 || b.UNKNOWN > 0 || b.WAITING > 0 || b.FAILED > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !1
                        }), b.WAITING > 0 && (b.SUBMITTED > 0 || b.RUNNING > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 || b.KILLED > 0 || b.FAILED > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        }), b.FAILED > 0 && (b.SUBMITTED > 0 || b.SUSPENDED > 0 || b.RUNNING > 0 || b.UNKNOWN > 0 || b.KILLED > 0 || b.WAITING > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !1
                        }), b.SUCCEEDED > 0 && (b.SUBMITTED > 0 || b.RUNNING > 0 || b.SUSPENDED > 0 || b.UNKNOWN > 0 || b.KILLED > 0 || b.WAITING > 0 || b.FAILED > 0 ? c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        } : c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !1
                        }), b.UNKNOWN > 0 && (c.selectedDisabledButtons = {
                            schedule: !0,
                            suspend: !0,
                            resume: !0,
                            stop: !0,
                            rerun: !0
                        }), 0 === c.selectedRows.length && (c.selectedDisabledButtons = {
                            schedule: !0,
                            resume: !0,
                            suspend: !0,
                            stop: !0,
                            rerun: !0
                        });
                    }, 50);
                };
                var f = function(a) {
                    var b = !1;
                    return c.selectedRows.forEach(function(c) {
                        angular.equals(a, c) && (b = !0);
                    }), b;
                };
                c.checkAll = function() {
                    c.selectedRows.length >= c.input.length ? angular.forEach(c.input, function(a) {
                        c.selectedRows.pop();
                    }) : angular.forEach(c.input, function(a) {
                        var b = {
                            instance: a.instance,
                            startTime: a.startTime,
                            endTime: a.endTime,
                            status: a.status,
                            type: c.type,
                            logFile: a.logFile
                        };
                        f(b) || c.selectedRows.push(b);
                    });
                }, c.goInstanceDetails = function(a) {
                    c.instanceDetails(a);
                };
                var g = function(a, d, e, f, g) {
                    b.logRequest(), b.postResumeInstance(a, d, e, f).success(function(d) {
                        b.logResponse("success", d, a), g && c.$parent.refreshInstanceList(c.type, c.name, c.start, c.end);
                    }).error(function(c) {
                        b.logResponse("error", c, a);
                    });
                }, h = function(a, d, e, f, g) {
                    b.logRequest(), b.postSuspendInstance(a, d, e, f).success(function(d) {
                        b.logResponse("success", d, a), g && c.$parent.refreshInstanceList(c.type, c.name, c.start, c.end);
                    }).error(function(c) {
                        b.logResponse("error", c, a);
                    });
                }, i = function(a, d, e, f, g) {
                    b.logRequest(), b.postReRunInstance(a, d, e, f).success(function(d) {
                        b.logResponse("success", d, a), g && c.$parent.refreshInstanceList(c.type, c.name, c.start, c.end);
                    }).error(function(c) {
                        b.logResponse("error", c, a);
                    });
                }, j = function(a, d, e, f, g) {
                    b.logRequest(), b.postKillInstance(a, d, e, f).success(function(d) {
                        b.logResponse("success", d, a), g && c.$parent.refreshInstanceList(c.type, c.name, c.start, c.end);
                    }).error(function(c) {
                        b.logResponse("error", c, a);
                    });
                };
                c.scopeResume = function() {
                    for (var a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1;
                        var e = c.selectedRows[a].instance, f = m(e), h = a === c.selectedRows.length - 1;
                        g(c.type, c.name, e, f, h);
                    }
                }, c.scopeSuspend = function() {
                    for (var a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1;
                        var e = c.selectedRows[a].instance, f = m(e), g = a === c.selectedRows.length - 1;
                        h(c.type, c.name, e, f, g);
                    }
                }, c.scopeRerun = function() {
                    for (var a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1;
                        var e = c.selectedRows[a].instance, f = m(e), g = a === c.selectedRows.length - 1;
                        i(c.type, c.name, e, f, g);
                    }
                }, c.scopeKill = function() {
                    for (var a = 0; a < c.selectedRows.length; a++) {
                        var d = c.selectedRows[a].type.toLowerCase();
                        b.responses.multiRequest[d] += 1;
                        var e = c.selectedRows[a].instance, f = m(e), g = a === c.selectedRows.length - 1;
                        j(c.type, c.name, e, f, g);
                    }
                }, c.download = function() {
                    var a;
                    for (a = 0; a < c.selectedRows.length; a++) c.downloadEntity(c.selectedRows[a].logFile);
                }, c.scopeGoPage = function(a) {
                    c.goPage(a);
                }, c.scopeNextOffset = function(a) {
                    var b = (parseInt(c.pages[0].label) + (e - 1)) * d;
                    c.changePagesSet(b, a, 0, c.start, c.end);
                }, c.scopePrevOffset = function(a) {
                    var b = (parseInt(c.pages[0].label) - (e + 1)) * d;
                    c.changePagesSet(b, a, e - 1, c.start, c.end);
                }, c.validateDate = function(a, b) {
                    var d = a.which || a.keyCode, e = String.fromCharCode(d);
                    if (a.preventDefault(), 8 == d || 46 == d || 37 == d || 39 == d || d >= 48 && d <= 57) if ("start" == b) if (c.startFilter) if (1 == c.startFilter.length) {
                        var f = c.startFilter.substring(c.startFilter.length - 1);
                        f = parseInt(f), f < 1 ? 0 == f && 0 == e || e <= 9 && (c.startFilter += e + "/") : e <= 2 && (c.startFilter += e + "/");
                    } else if (2 == c.startFilter.length) e <= 3 && (c.startFilter += "/" + e); else if (3 == c.startFilter.length) e <= 3 && (c.startFilter += e); else if (4 == c.startFilter.length) {
                        var f = c.startFilter.substring(c.startFilter.length - 1);
                        f = parseInt(f), f < 3 ? 0 == f && 0 == e || e <= 9 && (c.startFilter += e + "/") : e <= 1 && (c.startFilter += e + "/");
                    } else if (5 == c.startFilter.length) e <= 2 && (c.startFilter += "/" + e); else if (6 == c.startFilter.length) e <= 2 && (c.startFilter += e); else if (7 == c.startFilter.length) e <= 9 && (c.startFilter += e); else if (8 == c.startFilter.length) e <= 9 && (c.startFilter += e); else if (9 == c.startFilter.length) e <= 9 && (c.startFilter += e + " "); else if (10 == c.startFilter.length) e <= 2 && (c.startFilter += " " + e); else if (11 == c.startFilter.length) e <= 2 && (c.startFilter += e); else if (12 == c.startFilter.length) {
                        var f = c.startFilter.substring(c.startFilter.length - 1);
                        f = parseInt(f), f < 2 ? e <= 9 && (c.startFilter += e + ":") : e <= 4 && (c.startFilter += e + ":");
                    } else 13 == c.startFilter.length ? e <= 5 && (c.startFilter += ":" + e) : 14 == c.startFilter.length ? e <= 5 && (c.startFilter += e) : 15 == c.startFilter.length && e <= 9 && (c.startFilter += e, 
                    c.startFilterError = !1); else e <= 1 && (c.startFilter = e); else if (c.endFilter) if (1 == c.endFilter.length) {
                        var f = c.endFilter.substring(c.endFilter.length - 1);
                        f = parseInt(f), f < 1 ? 0 == f && 0 == e || e <= 9 && (c.endFilter += e + "/") : e <= 2 && (c.endFilter += e + "/");
                    } else if (2 == c.endFilter.length) e <= 3 && (c.endFilter += "/" + e); else if (3 == c.endFilter.length) e <= 3 && (c.endFilter += e); else if (4 == c.endFilter.length) {
                        var f = c.endFilter.substring(c.endFilter.length - 1);
                        f = parseInt(f), f < 3 ? 0 == f && 0 == e || e <= 9 && (c.endFilter += e + "/") : e <= 1 && (c.endFilter += e + "/");
                    } else if (5 == c.endFilter.length) e <= 2 && (c.endFilter += "/" + e); else if (6 == c.endFilter.length) e <= 2 && (c.endFilter += e); else if (7 == c.endFilter.length) e <= 9 && (c.endFilter += e); else if (8 == c.endFilter.length) e <= 9 && (c.endFilter += e); else if (9 == c.endFilter.length) e <= 9 && (c.endFilter += e + " "); else if (10 == c.endFilter.length) e <= 2 && (c.endFilter += " " + e); else if (11 == c.endFilter.length) e <= 2 && (c.endFilter += e); else if (12 == c.endFilter.length) {
                        var f = c.endFilter.substring(c.endFilter.length - 1);
                        f = parseInt(f), f < 2 ? e <= 9 && (c.endFilter += e + ":") : e <= 4 && (c.endFilter += e + ":");
                    } else 13 == c.endFilter.length ? e <= 5 && (c.endFilter += ":" + e) : 14 == c.endFilter.length ? e <= 5 && (c.endFilter += e) : 15 == c.endFilter.length && e <= 9 && (c.endFilter += e, 
                    c.endFilterError = !1); else e <= 1 && (c.endFilter = e);
                };
                var k = function(a) {
                    var b = a.split(" "), c = b[0].split("/");
                    return a = c[2] + "-" + c[0] + "-" + c[1] + "T" + b[1] + "Z";
                }, l = function(a) {
                    var b = a.substring(0, 1);
                    return !isNaN(b) && (b = a.substring(1, 2), !isNaN(b) && (b = a.substring(2, 3), 
                    "/" == b && (b = a.substring(3, 4), !isNaN(b) && (b = a.substring(4, 5), !isNaN(b) && (b = a.substring(5, 6), 
                    "/" == b && (b = a.substring(6, 7), !isNaN(b) && (b = a.substring(7, 8), !isNaN(b) && (b = a.substring(8, 9), 
                    !isNaN(b) && (b = a.substring(9, 10), !isNaN(b) && (b = a.substring(10, 11), " " == b && (b = a.substring(11, 12), 
                    !isNaN(b) && (b = a.substring(12, 13), !isNaN(b) && (b = a.substring(13, 14), ":" == b && (b = a.substring(14, 15), 
                    !isNaN(b) && (b = a.substring(15, 16), !isNaN(b))))))))))))))));
                };
                c.filterInstances = function(a) {
                    var b, d, e = !1;
                    c.startFilterError = !1, c.endFilterError = !1, c.startAfterEndError = !1, c.startAfterNominalError = !1, 
                    c.startBeforeNominalError = !1, c.endAfterNominalError = !1, c.endBeforeNominalError = !1;
                    var f = new Date(c.start), g = new Date(c.end);
                    if (c.startFilter && c.endFilter) if (16 == c.startFilter.length && 16 == c.endFilter.length) if (l(c.startFilter)) if (l(c.endFilter)) {
                        b = k(c.startFilter);
                        var h = new Date(b);
                        d = k(c.endFilter);
                        var i = new Date(d);
                        h > i ? (e = !1, c.startAfterEndError = !0) : h < f ? (e = !1, c.startAfterNominalError = !0) : h > g ? (e = !1, 
                        c.startBeforeNominalError = !0) : i < f ? (e = !1, c.endAfterNominalError = !0) : i > g ? (e = !1, 
                        c.endBeforeNominalError = !0) : e = !0;
                    } else e = !1, c.endFilterError = !0; else e = !1, c.startFilterError = !0; else 16 != c.startFilter.length && (c.startFilterError = !0), 
                    16 != c.endFilter.length && (c.endFilterError = !0); else if (c.startFilter) if (c.endFilterError = !1, 
                    16 == c.startFilter.length) if (l(c.startFilter)) {
                        b = k(c.startFilter);
                        var h = new Date(b);
                        h < f ? (e = !1, c.startAfterNominalError = !0) : h > g ? (e = !1, c.startBeforeNominalError = !0) : e = !0;
                    } else e = !1, c.startFilterError = !0; else c.startFilterError = !0; else if (c.endFilter) if (c.startFilterError = !1, 
                    16 == c.endFilter.length) if (l(c.endFilter)) {
                        d = k(c.endFilter);
                        var i = new Date(d);
                        i < f ? (e = !1, c.endAfterNominalError = !0) : i > g ? (e = !1, c.endBeforeNominalError = !0) : e = !0;
                    } else e = !1, c.endFilterError = !0; else c.endFilterError = !0; else e = !0;
                    if (e) {
                        var j = "";
                        a ? "startTime" === a ? ("desc" === c.startSortOrder ? c.startSortOrder = "asc" : c.startSortOrder = "desc", 
                        j = c.startSortOrder) : "endTime" === a ? ("desc" === c.endSortOrder ? c.endSortOrder = "asc" : c.endSortOrder = "desc", 
                        j = c.endSortOrder) : "status" === a && ("desc" === c.statusSortOrder ? c.statusSortOrder = "asc" : c.statusSortOrder = "desc", 
                        j = c.statusSortOrder) : (a = "startTime", j = "desc"), b || (b = c.start), d || (d = c.end), 
                        c.$parent.refreshInstanceList(c.type, c.name, b, d, c.statusFilter, a, j);
                    }
                };
                var m = function(a) {
                    var b = parseInt(a.substring(a.length - 3, a.length - 1));
                    return 59 === b ? b = 0 : b++, b < 10 && (b = "0" + b), a.substring(0, a.length - 3) + b + "Z";
                };
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.lineage-graph", [ "app.services" ]);
    a.controller("LineageGraphCtrl", [ "$scope", "Falcon", "X2jsService", "$window", "EncodeService", function(a, b, c, d, e) {} ]), 
    a.directive("lineageGraph", [ "$timeout", "Falcon", "$filter", function(a, b, c) {
        return {
            scope: {
                type: "=",
                name: "=",
                instance: "=",
                start: "=",
                end: "="
            },
            controller: "LineageGraphCtrl",
            restrict: "EA",
            templateUrl: "html/directives/lineageGraphDv.html",
            link: function(a, c) {
                function d(a) {
                    function c(a) {
                        return "process-instance" === a.type || "feed-instance" === a.type;
                    }
                    function e(a) {
                        return "input" === a._label || "output" === a._label;
                    }
                    function f(e) {
                        var f = e.id, h = e.depth;
                        return 0 === h ? void d(a) : (b.logRequest(), void b.getInstanceVerticesDirection(f, "both").success(function(a) {
                            b.logResponse("success", a, !1, !0);
                            for (var d = 0; d < a.results.length; ++d) {
                                var e = a.results[d];
                                void 0 === l.nodes[e._id] && c(e) && (l.nodes[e._id] = e, g.push({
                                    id: e._id,
                                    depth: h - 1
                                }));
                            }
                        }).error(function(a) {
                            b.logResponse("error", a, !1, !0);
                        }).finally(function() {
                            d(a);
                        }));
                    }
                    var g = l.queue;
                    if (0 === g.length) return void a();
                    var h = l.queue.pop();
                    b.logRequest(), b.getInstanceVerticesDirection(h.id, "bothE").success(function(a) {
                        b.logResponse("success", a, !1, !0);
                        for (var c = !1, d = !1, f = l.nodes[h.id], g = 0; g < a.results.length; ++g) {
                            var i = a.results[g];
                            e(i) && (c = c || i._inV === h.id, d = d || i._outV === h.id), void 0 === l.edges[i._id] && (l.edges[i._id] = i);
                        }
                        f.is_terminal = !(c && d);
                    }).error(function(a) {
                        b.logResponse("error", a, !1, !0);
                    }).finally(function() {
                        f(h);
                    });
                }
                function e() {
                    function a(a) {
                        function c(a) {
                            return function() {
                                l.queue.push({
                                    id: a._id,
                                    depth: 1
                                }), f();
                            };
                        }
                        function d(a) {
                            return function() {
                                e.selectAll(".lineage-node").classed("lineage-node-active", !1), d3.select(this).classed("lineage-node-active", !0), 
                                l.active_node_id = a._id, b.logRequest(), b.getInstanceVerticesProps(a._id).success(function(a) {
                                    b.logResponse("success", a, !1, !0), $("#lineage-info-panel").html(a);
                                }).error(function(a) {
                                    b.logResponse("error", a, !1, !0);
                                });
                            };
                        }
                        return function(b, f) {
                            var h = a[b], l = e.append("g").attr("transform", "translate(" + f.x + "," + f.y + ")"), m = l.append("circle").attr("data-node-id", b).attr("class", "lineage-node lineage-node-" + h.type).attr("r", g).on("click", d(h));
                            h.is_terminal ? m.classed("lineage-node-terminal", !0) : m.on("dblclick", c(h));
                            var n = a[b].name;
                            l.append("title").text(n);
                            var o = l.append("foreignObject").attr("transform", "translate(" + -i / 2 + ", " + k + " )").attr("width", i).attr("height", j);
                            o.append("xhtml:div").text(n).attr("class", "lineage-node-text");
                        };
                    }
                    function c(a) {
                        return function(b, c, d, f) {
                            var h = e.append("g").attr("class", "lineage-link");
                            h.append("path").attr("marker-end", "url(#arrowhead)").attr("d", function() {
                                var b = f.points, e = a.node(c), h = a.node(d), i = 0 === b.length ? e : b[b.length - 1], j = g, k = i.x, l = i.y, n = h.x, o = h.y, p = Math.sqrt((n - k) * (n - k) + (o - l) * (o - l)), q = j / p * (n - k), r = j / p * (o - l);
                                return b.unshift({
                                    x: e.x,
                                    y: e.y
                                }), b.push({
                                    x: h.x - q,
                                    y: h.y - r
                                }), m(b);
                            });
                        };
                    }
                    function d() {
                        e.append("svg:defs").append("svg:marker").attr("id", "arrowhead").attr("viewBox", "0 0 10 10").attr("refX", 8).attr("refY", 5).attr("markerUnits", "strokeWidth").attr("markerWidth", 8).attr("markerHeight", 5).attr("orient", "auto").attr("style", "fill: #ccc").append("svg:path").attr("d", "M 0 0 L 10 5 L 0 10 z");
                    }
                    var e = d3.select("#lineage-graph").html("").append("svg:g"), m = d3.svg.line().x(function(a) {
                        return a.x;
                    }).y(function(a) {
                        return a.y;
                    }).interpolate("basis"), n = {}, o = new dagre.Digraph();
                    for (var p in l.nodes) {
                        var q = l.nodes[p];
                        o.addNode(q._id, {
                            width: 2 * g + i,
                            height: 2 * g + j
                        }), n[q._id] = q;
                    }
                    for (var p in l.edges) {
                        var r = l.edges[p], s = n[r._inV], t = n[r._outV];
                        void 0 !== s && void 0 !== t && o.addEdge(null, r._outV, r._inV);
                    }
                    var u = dagre.layout().rankSep(h).rankDir("LR").run(o);
                    u.eachEdge(c(u)), u.eachNode(a(n));
                    var v = u.graph();
                    $("#lineage-graph").attr("width", v.width), d();
                }
                function f() {
                    d(function() {
                        e();
                        var a = l.active_node_id;
                        null !== a && d3.select('.node[data-node-id="' + a + '"]').classed("node-active", !0);
                    });
                }
                var g = 12, h = 120, i = 120, j = 80, k = 20, l = {
                    queue: {},
                    nodes: {},
                    edges: {},
                    active_node_id: null
                }, m = function(a, c) {
                    var d = a + "/" + c;
                    b.logRequest(), b.getInstanceVertices(d).success(function(a) {
                        b.logResponse("success", a, !1, !0);
                        var c = a.results[0];
                        l.queue = [ {
                            id: c._id,
                            depth: 1
                        } ], l.nodes = {}, l.nodes[c._id] = c, f();
                    }).error(function(a) {
                        b.logResponse("error", a, !1, !0);
                    });
                };
                m(a.name, a.instance);
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = {
        backspace: 8,
        tab: 9,
        enter: 13,
        escape: 27,
        space: 32,
        up: 38,
        down: 40,
        left: 37,
        right: 39,
        delete: 46,
        comma: 188
    }, b = 9007199254740991, c = [ "text", "email", "url" ], d = angular.module("ngTagsInput", []);
    d.directive("tagsInput", [ "$timeout", "$document", "$window", "tagsInputConfig", "tiUtil", function(d, e, f, g, h) {
        function i(a, b, c, d) {
            var e, f, g, i = {};
            return e = function(b) {
                return h.safeToString(b[a.displayProperty]);
            }, f = function(b, c) {
                b[a.displayProperty] = c;
            }, g = function(b) {
                var d = e(b);
                return d && d.length >= a.minLength && d.length <= a.maxLength && a.allowedTagsPattern.test(d) && !h.findInObjectArray(i.items, b, a.keyProperty || a.displayProperty) && c({
                    $tag: b
                });
            }, i.items = [], i.addText = function(a) {
                var b = {};
                return f(b, a), i.add(b);
            }, i.add = function(c) {
                var d = e(c);
                return a.replaceSpacesWithDashes && (d = h.replaceSpacesWithDashes(d)), f(c, d), 
                g(c) ? (i.items.push(c), b.trigger("tag-added", {
                    $tag: c
                })) : d && b.trigger("invalid-tag", {
                    $tag: c
                }), c;
            }, i.remove = function(a) {
                var c = i.items[a];
                if (d({
                    $tag: c
                })) return i.items.splice(a, 1), i.clearSelection(), b.trigger("tag-removed", {
                    $tag: c
                }), c;
            }, i.select = function(a) {
                a < 0 ? a = i.items.length - 1 : a >= i.items.length && (a = 0), i.index = a, i.selected = i.items[a];
            }, i.selectPrior = function() {
                i.select(--i.index);
            }, i.selectNext = function() {
                i.select(++i.index);
            }, i.removeSelected = function() {
                return i.remove(i.index);
            }, i.clearSelection = function() {
                i.selected = null, i.index = -1;
            }, i.clearSelection(), i;
        }
        function j(a) {
            return c.indexOf(a) !== -1;
        }
        return {
            restrict: "E",
            require: "ngModel",
            scope: {
                tags: "=ngModel",
                onTagAdding: "&",
                onTagAdded: "&",
                onInvalidTag: "&",
                onTagRemoving: "&",
                onTagRemoved: "&"
            },
            replace: !1,
            transclude: !0,
            templateUrl: "ngTagsInput/tags-input.html",
            controller: [ "$scope", "$attrs", "$element", function(a, c, d) {
                a.events = h.simplePubSub(), g.load("tagsInput", a, c, {
                    template: [ String, "ngTagsInput/tag-item.html" ],
                    type: [ String, "text", j ],
                    placeholder: [ String, "Add a tag" ],
                    tabindex: [ Number, null ],
                    removeTagSymbol: [ String, String.fromCharCode(215) ],
                    replaceSpacesWithDashes: [ Boolean, !0 ],
                    minLength: [ Number, 3 ],
                    maxLength: [ Number, b ],
                    addOnEnter: [ Boolean, !0 ],
                    addOnSpace: [ Boolean, !1 ],
                    addOnComma: [ Boolean, !0 ],
                    addOnBlur: [ Boolean, !0 ],
                    addOnPaste: [ Boolean, !1 ],
                    pasteSplitPattern: [ RegExp, /,/ ],
                    allowedTagsPattern: [ RegExp, /.+/ ],
                    enableEditingLastTag: [ Boolean, !1 ],
                    minTags: [ Number, 0 ],
                    maxTags: [ Number, b ],
                    displayProperty: [ String, "text" ],
                    keyProperty: [ String, "" ],
                    allowLeftoverText: [ Boolean, !1 ],
                    addFromAutocompleteOnly: [ Boolean, !1 ],
                    spellcheck: [ Boolean, !0 ]
                }), a.tagList = new i(a.options, a.events, h.handleUndefinedResult(a.onTagAdding, !0), h.handleUndefinedResult(a.onTagRemoving, !0)), 
                this.registerAutocomplete = function() {
                    var b = d.find("input");
                    return {
                        addTag: function(b) {
                            return a.tagList.add(b);
                        },
                        focusInput: function() {
                            b[0].focus();
                        },
                        getTags: function() {
                            return a.tags;
                        },
                        getCurrentTagText: function() {
                            return a.newTag.text;
                        },
                        getOptions: function() {
                            return a.options;
                        },
                        on: function(b, c) {
                            return a.events.on(b, c), this;
                        }
                    };
                }, this.registerTagItem = function() {
                    return {
                        getOptions: function() {
                            return a.options;
                        },
                        removeTag: function(b) {
                            a.disabled || a.tagList.remove(b);
                        }
                    };
                };
            } ],
            link: function(b, c, g, i) {
                var j, k = [ a.enter, a.comma, a.space, a.backspace, a.delete, a.left, a.right ], l = b.tagList, m = b.events, n = b.options, o = c.find("input"), p = [ "minTags", "maxTags", "allowLeftoverText" ];
                j = function() {
                    i.$setValidity("maxTags", b.tags.length <= n.maxTags), i.$setValidity("minTags", b.tags.length >= n.minTags), 
                    i.$setValidity("leftoverText", !(!b.hasFocus && !n.allowLeftoverText) || !b.newTag.text);
                }, i.$isEmpty = function(a) {
                    return !a || !a.length;
                }, b.newTag = {
                    text: "",
                    invalid: null,
                    setText: function(a) {
                        this.text = a, m.trigger("input-change", a);
                    }
                }, b.track = function(a) {
                    return a[n.keyProperty || n.displayProperty];
                }, b.$watch("tags", function(a) {
                    b.tags = h.makeObjectArray(a, n.displayProperty), l.items = b.tags;
                }), b.$watch("tags.length", function() {
                    j();
                }), g.$observe("disabled", function(a) {
                    b.disabled = a;
                }), b.eventHandlers = {
                    input: {
                        change: function(a) {
                            m.trigger("input-change", a);
                        },
                        keydown: function(a) {
                            m.trigger("input-keydown", a);
                        },
                        focus: function() {
                            b.hasFocus || (b.hasFocus = !0, m.trigger("input-focus"));
                        },
                        blur: function() {
                            d(function() {
                                var a = e.prop("activeElement"), d = a === o[0], f = c[0].contains(a);
                                !d && f || (b.hasFocus = !1, m.trigger("input-blur"));
                            });
                        },
                        paste: function(a) {
                            a.getTextData = function() {
                                var b = a.clipboardData || a.originalEvent && a.originalEvent.clipboardData;
                                return b ? b.getData("text/plain") : f.clipboardData.getData("Text");
                            }, m.trigger("input-paste", a);
                        }
                    },
                    host: {
                        click: function() {
                            b.disabled || o[0].focus();
                        }
                    }
                }, m.on("tag-added", b.onTagAdded).on("invalid-tag", b.onInvalidTag).on("tag-removed", b.onTagRemoved).on("tag-added", function() {
                    b.newTag.setText("");
                }).on("tag-added tag-removed", function() {
                    i.$setViewValue(b.tags);
                }).on("invalid-tag", function() {
                    b.newTag.invalid = !0;
                }).on("option-change", function(a) {
                    p.indexOf(a.name) !== -1 && j();
                }).on("input-change", function() {
                    l.clearSelection(), b.newTag.invalid = null;
                }).on("input-focus", function() {
                    c.triggerHandler("focus"), i.$setValidity("leftoverText", !0);
                }).on("input-blur", function() {
                    n.addOnBlur && !n.addFromAutocompleteOnly && l.addText(b.newTag.text), c.triggerHandler("blur"), 
                    j();
                }).on("input-keydown", function(c) {
                    var d, e, f, g, h = c.keyCode, i = c.shiftKey || c.altKey || c.ctrlKey || c.metaKey, j = {};
                    if (!i && k.indexOf(h) !== -1) {
                        if (j[a.enter] = n.addOnEnter, j[a.comma] = n.addOnComma, j[a.space] = n.addOnSpace, 
                        d = !n.addFromAutocompleteOnly && j[h], e = (h === a.backspace || h === a.delete) && l.selected, 
                        g = h === a.backspace && 0 === b.newTag.text.length && n.enableEditingLastTag, f = (h === a.backspace || h === a.left || h === a.right) && 0 === b.newTag.text.length && !n.enableEditingLastTag, 
                        d) l.addText(b.newTag.text); else if (g) {
                            var m;
                            l.selectPrior(), m = l.removeSelected(), m && b.newTag.setText(m[n.displayProperty]);
                        } else e ? l.removeSelected() : f && (h === a.left || h === a.backspace ? l.selectPrior() : h === a.right && l.selectNext());
                        (d || f || e || g) && c.preventDefault();
                    }
                }).on("input-paste", function(a) {
                    if (n.addOnPaste) {
                        var b = a.getTextData(), c = b.split(n.pasteSplitPattern);
                        c.length > 1 && (c.forEach(function(a) {
                            l.addText(a);
                        }), a.preventDefault());
                    }
                });
            }
        };
    } ]), d.directive("tiTagItem", [ "tiUtil", function(a) {
        return {
            restrict: "E",
            require: "^tagsInput",
            template: '<ng-include src="$$template"></ng-include>',
            scope: {
                data: "="
            },
            link: function(b, c, d, e) {
                var f = e.registerTagItem(), g = f.getOptions();
                b.$$template = g.template, b.$$removeTagSymbol = g.removeTagSymbol, b.$getDisplayText = function() {
                    var c = a.safeToString(b.data[g.displayProperty]);
                    return c = c.replace("Name:", "").replace("Type:", "").replace("Tag:", "");
                }, b.getDisplayLabel = function() {
                    var c = a.safeToString(b.data[g.displayProperty]);
                    return c = c.indexOf("Name:") !== -1 ? "Name:" : c.indexOf("Type:") !== -1 ? "Type:" : c.indexOf("Tag:") !== -1 ? "Tag:" : "";
                }, b.$removeTag = function() {
                    f.removeTag(b.$index);
                }, b.$watch("$parent.$index", function(a) {
                    b.$index = a;
                });
            }
        };
    } ]), d.directive("autoComplete", [ "$document", "$timeout", "$sce", "$q", "tagsInputConfig", "tiUtil", function(b, c, d, e, f, g) {
        function h(a, b, c) {
            var d, f, h, i = {};
            return h = function() {
                return b.tagsInput.keyProperty || b.tagsInput.displayProperty;
            }, d = function(a, c) {
                return a.filter(function(a) {
                    return !g.findInObjectArray(c, a, h(), function(a, c) {
                        return b.tagsInput.replaceSpacesWithDashes && (a = g.replaceSpacesWithDashes(a), 
                        c = g.replaceSpacesWithDashes(c)), g.defaultComparer(a, c);
                    });
                });
            }, i.reset = function() {
                f = null, i.items = [], i.visible = !1, i.index = -1, i.selected = null, i.query = null;
            }, i.show = function() {
                b.selectFirstMatch ? i.select(0) : i.selected = null, i.visible = !0;
            }, i.load = g.debounce(function(c, j) {
                i.query = c;
                var k = e.when(a({
                    $query: c
                }));
                f = k, k.then(function(a) {
                    k === f && (a = g.makeObjectArray(a.data || a, h()), a = d(a, j), i.items = a.slice(0, b.maxResultsToShow), 
                    i.items.length > 0 ? i.show() : i.reset());
                });
            }, b.debounceDelay), i.selectNext = function() {
                i.select(++i.index);
            }, i.selectPrior = function() {
                i.select(--i.index);
            }, i.select = function(a) {
                a < 0 ? a = i.items.length - 1 : a >= i.items.length && (a = 0), i.index = a, i.selected = i.items[a], 
                c.trigger("suggestion-selected", a);
            }, i.reset(), i;
        }
        function i(a, b) {
            var c = a.find("li").eq(b), d = c.parent(), e = c.prop("offsetTop"), f = c.prop("offsetHeight"), g = d.prop("clientHeight"), h = d.prop("scrollTop");
            e < h ? d.prop("scrollTop", e) : e + f > g + h && d.prop("scrollTop", e + f - g);
        }
        return {
            restrict: "E",
            require: "^tagsInput",
            scope: {
                source: "&"
            },
            templateUrl: "ngTagsInput/auto-complete.html",
            controller: [ "$scope", "$element", "$attrs", function(a, b, c) {
                a.events = g.simplePubSub(), f.load("autoComplete", a, c, {
                    template: [ String, "ngTagsInput/auto-complete-match.html" ],
                    debounceDelay: [ Number, 100 ],
                    minLength: [ Number, 3 ],
                    highlightMatchedText: [ Boolean, !0 ],
                    maxResultsToShow: [ Number, 10 ],
                    loadOnDownArrow: [ Boolean, !1 ],
                    loadOnEmpty: [ Boolean, !1 ],
                    loadOnFocus: [ Boolean, !1 ],
                    selectFirstMatch: [ Boolean, !0 ],
                    displayProperty: [ String, "" ]
                }), a.suggestionList = new h(a.source, a.options, a.events), this.registerAutocompleteMatch = function() {
                    return {
                        getOptions: function() {
                            return a.options;
                        },
                        getQuery: function() {
                            return a.suggestionList.query;
                        }
                    };
                };
            } ],
            link: function(b, c, d, e) {
                var f, g = [ a.enter, a.tab, a.escape, a.up, a.down ], h = b.suggestionList, j = e.registerAutocomplete(), k = b.options, l = b.events;
                k.tagsInput = j.getOptions(), f = function(a) {
                    return a && a.length >= k.minLength || !a && k.loadOnEmpty;
                }, b.addSuggestionByIndex = function(a) {
                    h.select(a), b.addSuggestion();
                }, b.addSuggestion = function() {
                    var a = !1;
                    return h.selected && (j.addTag(angular.copy(h.selected)), h.reset(), j.focusInput(), 
                    a = !0), a;
                }, b.track = function(a) {
                    return a[k.tagsInput.keyProperty || k.tagsInput.displayProperty];
                }, j.on("tag-added invalid-tag input-blur", function() {
                    h.reset();
                }).on("input-change", function(a) {
                    f(a) ? h.load(a, j.getTags()) : h.reset();
                }).on("input-focus", function() {
                    var a = j.getCurrentTagText();
                    k.loadOnFocus && f(a) && h.load(a, j.getTags());
                }).on("input-keydown", function(c) {
                    var d = c.keyCode, e = !1;
                    if (g.indexOf(d) !== -1) return h.visible ? d === a.down ? (h.selectNext(), e = !0) : d === a.up ? (h.selectPrior(), 
                    e = !0) : d === a.escape ? (h.reset(), e = !0) : d !== a.enter && d !== a.tab || (e = b.addSuggestion()) : d === a.down && b.options.loadOnDownArrow && (h.load(j.getCurrentTagText(), j.getTags()), 
                    e = !0), e ? (c.preventDefault(), c.stopImmediatePropagation(), !1) : void 0;
                }), l.on("suggestion-selected", function(a) {
                    i(c, a);
                });
            }
        };
    } ]), d.directive("tiAutocompleteMatch", [ "$sce", "tiUtil", function(a, b) {
        return {
            restrict: "E",
            require: "^autoComplete",
            template: '<ng-include src="$$template"></ng-include>',
            scope: {
                data: "="
            },
            link: function(c, d, e, f) {
                var g = f.registerAutocompleteMatch(), h = g.getOptions();
                c.$$template = h.template, c.$index = c.$parent.$index, c.$highlight = function(c) {
                    return h.highlightMatchedText && (c = b.safeHighlight(c, g.getQuery())), a.trustAsHtml(c);
                }, c.$getDisplayText = function() {
                    return b.safeToString(c.data[h.displayProperty || h.tagsInput.displayProperty]);
                };
            }
        };
    } ]), d.directive("tiTranscludeAppend", function() {
        return function(a, b, c, d, e) {
            e(function(a) {
                b.append(a);
            });
        };
    }), d.directive("tiAutosize", [ "tagsInputConfig", function(a) {
        return {
            restrict: "A",
            require: "ngModel",
            link: function(b, c, d, e) {
                var f, g, h = a.getTextAutosizeThreshold();
                f = angular.element('<span class="input"></span>'), f.css("display", "none").css("visibility", "hidden").css("width", "auto").css("white-space", "pre"), 
                c.parent().append(f), g = function(a) {
                    var b, e = a;
                    return angular.isString(e) && 0 === e.length && (e = d.placeholder), e && (f.text(e), 
                    f.css("display", ""), b = f.prop("offsetWidth"), f.css("display", "none")), c.css("width", b ? b + h + "px" : ""), 
                    a;
                }, e.$parsers.unshift(g), e.$formatters.unshift(g), d.$observe("placeholder", function(a) {
                    e.$modelValue || g(a);
                });
            }
        };
    } ]), d.directive("tiBindAttrs", function() {
        return function(a, b, c) {
            a.$watch(c.tiBindAttrs, function(a) {
                angular.forEach(a, function(a, b) {
                    c.$set(b, a);
                });
            }, !0);
        };
    }), d.provider("tagsInputConfig", function() {
        var a = {}, b = {}, c = 3;
        this.setDefaults = function(b, c) {
            return a[b] = c, this;
        }, this.setActiveInterpolation = function(a, c) {
            return b[a] = c, this;
        }, this.setTextAutosizeThreshold = function(a) {
            return c = a, this;
        }, this.$get = [ "$interpolate", function(d) {
            var e = {};
            return e[String] = function(a) {
                return a;
            }, e[Number] = function(a) {
                return parseInt(a, 10);
            }, e[Boolean] = function(a) {
                return "true" === a.toLowerCase();
            }, e[RegExp] = function(a) {
                return new RegExp(a);
            }, {
                load: function(c, f, g, h) {
                    var i = function() {
                        return !0;
                    };
                    f.options = {}, angular.forEach(h, function(h, j) {
                        var k, l, m, n, o, p;
                        k = h[0], l = h[1], m = h[2] || i, n = e[k], o = function() {
                            var b = a[c] && a[c][j];
                            return angular.isDefined(b) ? b : l;
                        }, p = function(a) {
                            f.options[j] = a && m(a) ? n(a) : o();
                        }, b[c] && b[c][j] ? g.$observe(j, function(a) {
                            p(a), f.events.trigger("option-change", {
                                name: j,
                                newValue: a
                            });
                        }) : p(g[j] && d(g[j])(f.$parent));
                    });
                },
                getTextAutosizeThreshold: function() {
                    return c;
                }
            };
        } ];
    }), d.factory("tiUtil", [ "$timeout", function(a) {
        var b = {};
        return b.debounce = function(b, c) {
            var d;
            return function() {
                var e = arguments;
                a.cancel(d), d = a(function() {
                    b.apply(null, e);
                }, c);
            };
        }, b.makeObjectArray = function(a, b) {
            return a = a || [], a.length > 0 && !angular.isObject(a[0]) && a.forEach(function(c, d) {
                a[d] = {}, a[d][b] = c;
            }), a;
        }, b.findInObjectArray = function(a, c, d, e) {
            var f = null;
            return e = e || b.defaultComparer, a.some(function(a) {
                if (e(a[d], c[d])) return f = a, !0;
            }), f;
        }, b.defaultComparer = function(a, c) {
            return b.safeToString(a).toLowerCase() === b.safeToString(c).toLowerCase();
        }, b.safeHighlight = function(a, c) {
            function d(a) {
                return a.replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
            }
            if (!c) return a;
            a = b.encodeHTML(a), c = b.encodeHTML(c);
            var e = new RegExp("&[^;]+;|" + d(c), "gi");
            return a.replace(e, function(a) {
                return a.toLowerCase() === c.toLowerCase() ? "<em>" + a + "</em>" : a;
            });
        }, b.safeToString = function(a) {
            return angular.isUndefined(a) || null == a ? "" : a.toString().trim();
        }, b.encodeHTML = function(a) {
            return b.safeToString(a).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }, b.handleUndefinedResult = function(a, b) {
            return function() {
                var c = a.apply(null, arguments);
                return angular.isUndefined(c) ? b : c;
            };
        }, b.replaceSpacesWithDashes = function(a) {
            return b.safeToString(a).replace(/\s/g, "-");
        }, b.simplePubSub = function() {
            var a = {};
            return {
                on: function(b, c) {
                    return b.split(" ").forEach(function(b) {
                        a[b] || (a[b] = []), a[b].push(c);
                    }), this;
                },
                trigger: function(c, d) {
                    var e = a[c] || [];
                    return e.every(function(a) {
                        return b.handleUndefinedResult(a, !0)(d);
                    }), this;
                }
            };
        }, b;
    } ]), d.run([ "$templateCache", function(a) {
        a.put("ngTagsInput/tags-input.html", '<div class="host" tabindex="-1" ng-click="eventHandlers.host.click()" ti-transclude-append=""><div class="tags" ng-class="{focused: hasFocus}"><ul class="tag-list"><li class="tag-item" ng-repeat="tag in tagList.items track by track(tag)" ng-class="{ selected: tag == tagList.selected }"><ti-tag-item data="tag"></ti-tag-item></li></ul><input autofocus class="input" autocomplete="off" ng-model="newTag.text" ng-change="eventHandlers.input.change(newTag.text)" ng-keydown="eventHandlers.input.keydown($event)" ng-focus="eventHandlers.input.focus($event)" ng-blur="eventHandlers.input.blur($event)" ng-paste="eventHandlers.input.paste($event)" ng-trim="false" ng-class="{\'invalid-tag\': newTag.invalid}" ng-disabled="disabled" ti-bind-attrs="{type: options.type, placeholder: options.placeholder, tabindex: options.tabindex, spellcheck: options.spellcheck}" ti-autosize=""></div></div>'), 
        a.put("ngTagsInput/tag-item.html", '<strong ng-bind="getDisplayLabel()"></strong> <span ng-bind="$getDisplayText()"></span> <a class="remove-button" ng-click="$removeTag()" ng-bind="$$removeTagSymbol"></a>'), 
        a.put("ngTagsInput/auto-complete.html", '<div class="autocomplete" ng-if="suggestionList.visible"><ul class="suggestion-list"><li class="suggestion-item" ng-repeat="item in suggestionList.items track by track(item)" ng-class="{selected: item == suggestionList.selected}" ng-click="addSuggestionByIndex($index)" ng-mouseenter="suggestionList.select($index)"><ti-autocomplete-match data="item"></ti-autocomplete-match></li></ul></div>'), 
        a.put("ngTagsInput/auto-complete-match.html", '<span ng-bind-html="$highlight($getDisplayText())"></span>');
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app.directives.server-messages", []);
    a.directive("serverMessages", function() {
        return {
            replace: !1,
            restrict: "E",
            templateUrl: "html/directives/serverMessagesDv.html",
            link: function(a, b) {}
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("tooltip", []);
    a.directive("toogle", function() {
        return {
            restrict: "A",
            link: function(a, b, c) {
                "tooltip" == c.toggle && $(b).tooltip(), "popover" == c.toggle && $(b).popover();
            }
        };
    });
}(), function() {
    "use strict";
    var a = angular.module("app.directives.validation-message", [ "app.services" ]);
    a.directive("validationMessage", [ "ValidationService", function(a) {
        return {
            replace: !1,
            scope: {
                validationMessage: "@"
            },
            restrict: "A",
            link: function(b, c) {
                function d() {
                    j = 0, c.parent().append('<label ng-show="messageSwitcher.show" class="custom-danger validationMessageGral"></label>'), 
                    angular.forEach(c.parent().children(), function() {
                        j += 1;
                    }), j -= 1, i = $(c).parent().children()[j];
                }
                function e() {
                    var a = c[0].value;
                    0 === a.length ? (b.messageSwitcher.show = !1, c.parent().removeClass("showMessage showValidationStyle validationMessageParent")) : a.length > 0 && c.hasClass("ng-valid") ? (c.removeClass("empty"), 
                    c.parent().removeClass("showMessage showValidationStyle validationMessageParent"), 
                    b.messageSwitcher.show = !1, angular.element(i).addClass("valid")) : c.hasClass("ng-invalid-pattern") && a.length > 0 ? (b.messageSwitcher.show = !0, 
                    angular.element(i).html(k.patternInvalid).removeClass("valid"), c.removeClass("empty"), 
                    c.parent().addClass("showMessage showValidationStyle validationMessageParent")) : (c.addClass("empty"), 
                    c.parent().removeClass("showMessage"), b.messageSwitcher.show = !1);
                }
                function f() {
                    "select-one" === c[0].type ? c.bind("change", function() {
                        b.messageSwitcher.show = !1, angular.element(i).hide();
                    }) : (c.bind("keyup", e), c.bind("blur", function() {
                        0 === c[0].value.length && (c.parent().addClass("showMessage showValidationStyle validationMessageParent"), 
                        b.messageSwitcher.show = !0, angular.element(i).html(k.empty).removeClass("valid"));
                    }), c.bind("focus", function() {
                        c.removeClass("empty");
                    }));
                }
                function g() {
                    setTimeout(function() {
                        c.hasClass("ng-valid") || 0 === c[0].value.length ? b.messageSwitcher.show = !1 : b.messageSwitcher.show = !0, 
                        0 === c[0].value.length && (angular.element(i).html(k.empty), b.messageSwitcher.show = !0);
                    }, 100);
                }
                function h() {
                    d(), f(), g();
                }
                var i, j = 0, k = angular.fromJson(b.validationMessage);
                b.messageSwitcher = {
                    show: !1
                }, k.patternInvalid = k.patternInvalid || k.empty, h(), b.$watch(function() {
                    return a.displayValidations;
                }, g), b.$watch(function() {
                    return c[0].value.length;
                }, function() {
                    0 === c[0].value.length && c.addClass("empty");
                });
            }
        };
    } ]), a.directive("validationOptionalMessage", [ function() {
        return {
            replace: !1,
            scope: {
                validationOptionalMessage: "@",
                required: "@"
            },
            restrict: "A",
            link: function(a, b, c) {
                function d() {
                    l = 0, b.parent().append('<label ng-show="messageSwitcher.show" class="custom-danger validationMessageGral"></label>'), 
                    angular.forEach(b.parent().children(), function() {
                        l += 1;
                    }), l -= 1, i = $(b).parent().children()[l];
                }
                function e() {
                    m = b[0].value.length, n = c.required, j = b.hasClass("ng-valid"), k = b.hasClass("ng-invalid-pattern"), 
                    0 === m && n ? (b.addClass("empty"), angular.element(i).html(o.empty).addClass("hidden"), 
                    b.parent().removeClass("showMessage showValidationStyle validationMessageParent")) : 0 !== m || n ? k && m > 0 ? (b.removeClass("empty"), 
                    angular.element(i).html(o.patternInvalid).removeClass("hidden"), b.parent().addClass("showMessage showValidationStyle validationMessageParent")) : j && m > 0 ? (b.removeClass("empty"), 
                    angular.element(i).addClass("hidden"), b.parent().removeClass("showMessage showValidationStyle validationMessageParent")) : console.log("else") : (b.addClass("empty"), 
                    b.parent().removeClass("showMessage showValidationStyle validationMessageParent"), 
                    angular.element(i).addClass("hidden"));
                }
                function f() {
                    b.bind("keyup", e), b.bind("blur", function() {
                        0 === m && n && (b.removeClass("empty"), angular.element(i).html(o.empty).removeClass("hidden"), 
                        b.parent().addClass("showMessage showValidationStyle validationMessageParent"));
                    });
                }
                function g() {
                    e(), setTimeout(function() {
                        0 === m && n && (angular.element(i).removeClass("hidden"), b.removeClass("empty"));
                    }, 100);
                }
                function h() {
                    d(), f(), e();
                }
                var i, j, k, l = 0, m = b[0].value.length, n = c.required, o = angular.fromJson(a.validationOptionalMessage);
                o.patternInvalid = o.patternInvalid || o.empty, h(), a.$watch(function() {
                    return a.required;
                }, g), a.$watch(function() {
                    return b[0].value.length;
                }, function() {
                    0 === b[0].value.length && b.addClass("empty");
                });
            }
        };
    } ]);
}(), function() {
    "use strict";
    var a = angular.module("app", [ "ui.bootstrap", "ui.router", "ngCookies", "ngAnimate", "ngMessages", "checklist-model", "app.controllers", "app.directives", "app.services", "ngTagsInput", "nsPopover", "ngAnimate", "ngMask", "dateHelper" ]);
    a.config([ "$stateProvider", "$urlRouterProvider", "$httpProvider", function(a, b, c) {
        c.defaults.headers.common["X-CSRF-Token"] = $("meta[name=csrf-token]").attr("content"), 
        c.defaults.headers.common["X-Requested-By"] = "X-Requested-By", b.otherwise("/"), 
        a.state("main", {
            url: "/",
            templateUrl: "html/mainTpl.html",
            controller: "DashboardCtrl"
        }).state("authenticating", {
            templateUrl: "html/authenticating.html"
        }).state("login", {
            controller: "LoginFormCtrl",
            templateUrl: "html/login.html"
        }).state("entityDefinition", {
            controller: "EntityDefinitionCtrl",
            templateUrl: "html/entityDefinitionTpl.html"
        }).state("forms", {
            templateUrl: "html/formsTpl.html"
        }).state("forms.cluster", {
            controller: "ClusterFormCtrl",
            templateUrl: "html/cluster/clusterFormTpl.html"
        }).state("forms.cluster.general", {
            templateUrl: "html/cluster/clusterFormGeneralStepTpl.html"
        }).state("forms.cluster.summary", {
            templateUrl: "html/cluster/clusterFormSummaryStepTpl.html"
        }).state("forms.feed", {
            templateUrl: "html/feed/feedFormTpl.html",
            controller: "FeedController"
        }).state("forms.feed.general", {
            templateUrl: "html/feed/feedFormGeneralStepTpl.html",
            controller: "FeedGeneralInformationController"
        }).state("forms.feed.properties", {
            templateUrl: "html/feed/feedFormPropertiesStepTpl.html",
            controller: "FeedPropertiesController"
        }).state("forms.feed.location", {
            templateUrl: "html/feed/feedFormLocationStepTpl.html",
            controller: "FeedLocationController"
        }).state("forms.feed.clusters", {
            templateUrl: "html/feed/feedFormClustersStepTpl.html",
            controller: "FeedClustersController",
            resolve: {
                clustersList: [ "Falcon", function(a) {
                    return a.getEntities("cluster").then(function(a) {
                        return a.data;
                    });
                } ]
            }
        }).state("forms.feed.summary", {
            templateUrl: "html/feed/feedFormSummaryStepTpl.html",
            controller: "FeedSummaryController"
        }).state("forms.process", {
            templateUrl: "html/process/processFormTpl.html",
            controller: "ProcessRootCtrl"
        }).state("forms.process.general", {
            templateUrl: "html/process/processFormGeneralStepTpl.html",
            controller: "ProcessGeneralInformationCtrl"
        }).state("forms.process.properties", {
            templateUrl: "html/process/processFormPropertiesStepTpl.html",
            controller: "ProcessPropertiesCtrl"
        }).state("forms.process.clusters", {
            templateUrl: "html/process/processFormClustersStepTpl.html",
            controller: "ProcessClustersCtrl",
            resolve: {
                clustersList: [ "Falcon", function(a) {
                    return a.getEntities("cluster").then(function(a) {
                        return a.data;
                    });
                } ]
            }
        }).state("forms.process.io", {
            templateUrl: "html/process/processFormInputsAndOutputsStepTpl.html",
            controller: "ProcessInputsAndOutputsCtrl",
            resolve: {
                feedsList: [ "Falcon", function(a) {
                    return a.getEntities("feed").then(function(a) {
                        return a.data;
                    });
                } ]
            }
        }).state("forms.process.summary", {
            templateUrl: "html/process/processFormSummaryStepTpl.html",
            controller: "ProcessSummaryCtrl"
        }).state("entityDetails", {
            views: {
                "": {
                    controller: "EntityDetailsCtrl",
                    templateUrl: "html/entityDetailsTpl.html"
                },
                "feedSummary@entityDetails": {
                    templateUrl: "html/feed/feedSummary.html"
                },
                "processSummary@entityDetails": {
                    templateUrl: "html/process/processSummary.html"
                }
            }
        }).state("forms.dataset", {
            controller: "DatasetCtrl",
            templateUrl: "html/dataset/datasetFormTpl.html",
            resolve: {
                clustersList: [ "Falcon", function(a) {
                    return a.getEntities("cluster").then(function(a) {
                        return a.data.entity;
                    });
                } ]
            }
        }).state("forms.dataset.general", {
            templateUrl: "html/dataset/datasetFormGeneralStepTpl.html"
        }).state("forms.dataset.summary", {
            templateUrl: "html/dataset/datasetFormSummaryStepTpl.html"
        }).state("instanceDetails", {
            templateUrl: "html/instanceDetails.html",
            controller: "InstanceDetailsCtrl"
        });
    } ]), a.run([ "$rootScope", "$state", "$location", "$http", "$stateParams", "$cookieStore", "SpinnersFlag", "ServerAPI", "$timeout", "$interval", function(a, b, c, d, e, f, g, h, i, j) {
        a.ambariView = function() {
            var a = c.absUrl(), b = a.indexOf("views/");
            return b !== -1;
        };
        var k = c.absUrl(), l = k.indexOf("views/");
        if (l !== -1) {
            l += 6;
            var m = k.substring(l), n = m.split("/");
            a.serviceURI = "/api/v1/views/" + n[0] + "/versions/" + n[1] + "/instances/" + n[2] + "/resources/proxy";
        }
        a.secureModeDefined || (a.secureMode = !1, h.clearUser().then(function() {
            h.getServerConfig().then(function() {
                h.data && h.data.properties.forEach(function(b) {
                    "authentication" == b.key && "kerberos" == b.value && (a.secureMode = !0);
                }), a.secureModeDefined = !0;
            });
        })), a.isSecureMode = function() {
            return !!a.secureModeDefined && !!a.secureMode;
        }, a.userLogged = function() {
            return !(!angular.isDefined(f.get("userToken")) || null === f.get("userToken"));
        }, a.$on("$stateChangeSuccess", function(b, c, d, e) {
            g.show = !1, g.backShow = !1, a.previousState = e.name, a.currentState = c.name;
        }), a.$on("$stateChangeError", function(a, b, c, d, e) {
            console.log("Manual log of stateChangeError: " + e);
        });
        var o = function(c, e) {
            if ("login" !== e.name) if (a.ambariView()) angular.isDefined(f.get("userToken")) && null !== f.get("userToken") || (c.preventDefault(), 
            d.get(a.serviceURI).success(function(a) {
                var c = {};
                c.user = a, f.put("userToken", c), b.transitionTo("main");
            })); else if (a.secureMode) h.getCurrentUser().then(function() {
                var a = {};
                a.user = h.user, f.put("userToken", a), b.transitionTo("main");
            }); else if (a.userLogged()) {
                var g = f.get("userToken"), i = new Date().getTime();
                i -= g.timeOut, i > g.timeOutLimit ? (f.put("userToken", null), c.preventDefault(), 
                b.transitionTo("login")) : (g.timeOut = new Date().getTime(), f.put("userToken", g));
            } else c.preventDefault(), b.transitionTo("login");
        };
        a.$on("$stateChangeStart", function(c, d) {
            if (a.userLogged()) {
                var e = f.get("userToken"), g = new Date().getTime();
                g -= e.timeOut, g > e.timeOutLimit ? (f.put("userToken", null), c.preventDefault(), 
                b.transitionTo("login")) : (e.timeOut = new Date().getTime(), f.put("userToken", e));
            } else {
                var h;
                a.secureModeDefined || ("authenticating" !== d.name && (c.preventDefault(), b.transitionTo("authenticating")), 
                h = j(function() {
                    a.secureModeDefined && (j.cancel(h), o(c, d));
                }, 1e3));
            }
        });
    } ]);
}();
//# sourceMappingURL=main.min.map